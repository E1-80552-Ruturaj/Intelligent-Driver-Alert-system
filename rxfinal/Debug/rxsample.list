
rxsample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08005960  08005960  00015960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce4  08005ce4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cec  08005cec  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08005cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          000001b8  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000038c  2000038c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005eb0  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000158e  00000000  00000000  000260f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000618  00000000  00000000  00027688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000046c  00000000  00000000  00027ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020da9  00000000  00000000  0002810c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000067e3  00000000  00000000  00048eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4084  00000000  00000000  0004f698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002748  00000000  00000000  0011371c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00115e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005948 	.word	0x08005948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005948 	.word	0x08005948

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[4];



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000eb4:	f001 fbf2 	bl	800269c <HAL_GPIO_WritePin>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000ec0:	f000 fdd6 	bl	8001a70 <HAL_CAN_GetRxMessage>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	20000234 	.word	0x20000234
 8000ed4:	20000218 	.word	0x20000218
 8000ed8:	200001f0 	.word	0x200001f0

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fb10 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f832 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f8ee 	bl	80010c8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000eec:	f000 f898 	bl	8001020 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <main+0x60>)
 8000ef2:	f000 fd79 	bl	80019e8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <main+0x60>)
 8000efa:	f000 fecb 	bl	8001c94 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f000 fb72 	bl	80015e8 <HAL_Delay>
  HAL_Delay(100);
 8000f04:	2064      	movs	r0, #100	; 0x64
 8000f06:	f000 fb6f 	bl	80015e8 <HAL_Delay>
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
//		  HAL_Delay(1000);
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
//	  }
	  if(RxData[0]==26)
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <main+0x64>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b1a      	cmp	r3, #26
 8000f10:	d105      	bne.n	8000f1e <main+0x42>
	  {
		  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f16:	480b      	ldr	r0, [pc, #44]	; (8000f44 <main+0x68>)
 8000f18:	f001 fbd9 	bl	80026ce <HAL_GPIO_TogglePin>
 8000f1c:	e7f5      	b.n	8000f0a <main+0x2e>
	  }
	  else if(RxData[1]<20)
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <main+0x64>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d8f1      	bhi.n	8000f0a <main+0x2e>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <main+0x68>)
 8000f2c:	f001 fbcf 	bl	80026ce <HAL_GPIO_TogglePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2104      	movs	r1, #4
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <main+0x6c>)
 8000f36:	f001 fbb1 	bl	800269c <HAL_GPIO_WritePin>
	  if(RxData[0]==26)
 8000f3a:	e7e6      	b.n	8000f0a <main+0x2e>
 8000f3c:	200001f0 	.word	0x200001f0
 8000f40:	20000234 	.word	0x20000234
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40020000 	.word	0x40020000

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fda1 	bl	8003aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <SystemClock_Config+0xd0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <SystemClock_Config+0xd0>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fac:	2301      	movs	r3, #1
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fc0:	2348      	movs	r3, #72	; 0x48
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fb97 	bl	8002704 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 f8de 	bl	800119c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fdf8 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100a:	f000 f8c7 	bl	800119c <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <MX_CAN1_Init+0xa4>)
 800102a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_CAN1_Init+0xa0>)
 800102e:	2212      	movs	r2, #18
 8001030:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_CAN1_Init+0xa0>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001040:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001044:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001048:	2200      	movs	r2, #0
 800104a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_CAN1_Init+0xa0>)
 800104e:	2200      	movs	r2, #0
 8001050:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001054:	2200      	movs	r2, #0
 8001056:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_CAN1_Init+0xa0>)
 800105a:	2200      	movs	r2, #0
 800105c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001066:	2200      	movs	r2, #0
 8001068:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_CAN1_Init+0xa0>)
 800106c:	2200      	movs	r2, #0
 800106e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <MX_CAN1_Init+0xa0>)
 8001072:	f000 fadd 	bl	8001630 <HAL_CAN_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800107c:	f000 f88e 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
  canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  canFilterConfig.SlaveStartFilterBank=14;
 8001084:	230e      	movs	r3, #14
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  canFilterConfig.FilterBank=2;
 8001088:	2302      	movs	r3, #2
 800108a:	617b      	str	r3, [r7, #20]
  canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
  canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  canFilterConfig.FilterMaskIdLow=0x0000;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  canFilterConfig.FilterMaskIdHigh=0xFF00;
 800109c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80010a0:	60bb      	str	r3, [r7, #8]
  canFilterConfig.FilterIdLow=0x0000;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  canFilterConfig.FilterIdHigh=0x1500;
 80010a6:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80010aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <MX_CAN1_Init+0xa0>)
 80010b2:	f000 fbb9 	bl	8001828 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001f0 	.word	0x200001f0
 80010c4:	40006400 	.word	0x40006400

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_GPIO_Init+0xc8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <MX_GPIO_Init+0xc8>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_GPIO_Init+0xc8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_GPIO_Init+0xc8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a23      	ldr	r2, [pc, #140]	; (8001190 <MX_GPIO_Init+0xc8>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_GPIO_Init+0xc8>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_GPIO_Init+0xc8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <MX_GPIO_Init+0xc8>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_GPIO_Init+0xc8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_9, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001138:	4816      	ldr	r0, [pc, #88]	; (8001194 <MX_GPIO_Init+0xcc>)
 800113a:	f001 faaf 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_GPIO_Init+0xd0>)
 8001146:	f001 faa9 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_9;
 800114a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_GPIO_Init+0xcc>)
 8001164:	f001 f8fe 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001168:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_GPIO_Init+0xd0>)
 8001182:	f001 f8ef 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3720      	adds	r7, #32
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020c00 	.word	0x40020c00

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011e6:	2007      	movs	r0, #7
 80011e8:	f001 f87a 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_CAN_MspInit+0x94>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d134      	bne.n	8001284 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <HAL_CAN_MspInit+0x98>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_CAN_MspInit+0x98>)
 8001224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_CAN_MspInit+0x98>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_CAN_MspInit+0x98>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_CAN_MspInit+0x98>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_CAN_MspInit+0x98>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001260:	2303      	movs	r3, #3
 8001262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001264:	2309      	movs	r3, #9
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_CAN_MspInit+0x9c>)
 8001270:	f001 f878 	bl	8002364 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2014      	movs	r0, #20
 800127a:	f001 f83c 	bl	80022f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800127e:	2014      	movs	r0, #20
 8001280:	f001 f855 	bl	800232e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40006400 	.word	0x40006400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020400 	.word	0x40020400

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f960 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <CAN1_RX0_IRQHandler+0x10>)
 80012f2:	f000 fcf5 	bl	8001ce0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f0 	.word	0x200001f0

08001300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_kill>:

int _kill(int pid, int sig)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800131a:	f002 fc15 	bl	8003b48 <__errno>
 800131e:	4603      	mov	r3, r0
 8001320:	2216      	movs	r2, #22
 8001322:	601a      	str	r2, [r3, #0]
  return -1;
 8001324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_exit>:

void _exit (int status)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ffe7 	bl	8001310 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001342:	e7fe      	b.n	8001342 <_exit+0x12>

08001344 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00a      	b.n	800136c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001356:	f3af 8000 	nop.w
 800135a:	4601      	mov	r1, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf0      	blt.n	8001356 <_read+0x12>
  }

  return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b086      	sub	sp, #24
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e009      	b.n	80013a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	60ba      	str	r2, [r7, #8]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbf1      	blt.n	8001390 <_write+0x12>
  }
  return len;
 80013ac:	687b      	ldr	r3, [r7, #4]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_close>:

int _close(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013de:	605a      	str	r2, [r3, #4]
  return 0;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_isatty>:

int _isatty(int file)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <_sbrk+0x5c>)
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <_sbrk+0x60>)
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001434:	4b13      	ldr	r3, [pc, #76]	; (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	; (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001450:	f002 fb7a 	bl	8003b48 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20020000 	.word	0x20020000
 8001480:	00000400 	.word	0x00000400
 8001484:	20000238 	.word	0x20000238
 8001488:	20000390 	.word	0x20000390

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <SystemInit+0x20>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <SystemInit+0x20>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014b6:	490e      	ldr	r1, [pc, #56]	; (80014f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014cc:	4c0b      	ldr	r4, [pc, #44]	; (80014fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014da:	f7ff ffd7 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014de:	f002 fb39 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e2:	f7ff fcfb 	bl	8000edc <main>
  bx  lr    
 80014e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014f4:	08005cf4 	.word	0x08005cf4
  ldr r2, =_sbss
 80014f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014fc:	2000038c 	.word	0x2000038c

08001500 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC_IRQHandler>
	...

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_Init+0x40>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_Init+0x40>)
 800150e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_Init+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_Init+0x40>)
 800151a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800151e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x40>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 fed7 	bl	80022e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f808 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fe36 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 feef 	bl	800234a <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001584:	f000 feb7 	bl	80022f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000004 	.word	0x20000004

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000008 	.word	0x20000008
 80015cc:	2000023c 	.word	0x2000023c

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2000023c 	.word	0x2000023c

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000008 	.word	0x20000008

08001630 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0ed      	b.n	800181e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fdd2 	bl	80011f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff ffb4 	bl	80015d0 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166a:	e012      	b.n	8001692 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800166c:	f7ff ffb0 	bl	80015d0 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b0a      	cmp	r3, #10
 8001678:	d90b      	bls.n	8001692 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2205      	movs	r2, #5
 800168a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0c5      	b.n	800181e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0e5      	beq.n	800166c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0202 	bic.w	r2, r2, #2
 80016ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7ff ff8e 	bl	80015d0 <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016b6:	e012      	b.n	80016de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016b8:	f7ff ff8a 	bl	80015d0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b0a      	cmp	r3, #10
 80016c4:	d90b      	bls.n	80016de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2205      	movs	r2, #5
 80016d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e09f      	b.n	800181e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e5      	bne.n	80016b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7e1b      	ldrb	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d108      	bne.n	8001706 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	e007      	b.n	8001716 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7e5b      	ldrb	r3, [r3, #25]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d108      	bne.n	8001730 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	e007      	b.n	8001740 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800173e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e9b      	ldrb	r3, [r3, #26]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e007      	b.n	800176a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0220 	bic.w	r2, r2, #32
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7edb      	ldrb	r3, [r3, #27]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0210 	bic.w	r2, r2, #16
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e007      	b.n	8001794 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0210 	orr.w	r2, r2, #16
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7f1b      	ldrb	r3, [r3, #28]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0208 	orr.w	r2, r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0208 	bic.w	r2, r2, #8
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7f5b      	ldrb	r3, [r3, #29]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0204 	orr.w	r2, r2, #4
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0204 	bic.w	r2, r2, #4
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	ea42 0103 	orr.w	r1, r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001840:	7cfb      	ldrb	r3, [r7, #19]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <HAL_CAN_ConfigFilter+0x26>
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2b02      	cmp	r3, #2
 800184a:	f040 80be 	bne.w	80019ca <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001850:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001868:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2201      	movs	r2, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	401a      	ands	r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d123      	bne.n	80018f8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3248      	adds	r2, #72	; 0x48
 80018d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ee:	6979      	ldr	r1, [r7, #20]
 80018f0:	3348      	adds	r3, #72	; 0x48
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d122      	bne.n	8001946 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001920:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3248      	adds	r2, #72	; 0x48
 8001926:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800193a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	3348      	adds	r3, #72	; 0x48
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	401a      	ands	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001960:	e007      	b.n	8001972 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	401a      	ands	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800198c:	e007      	b.n	800199e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019bc:	f023 0201 	bic.w	r2, r3, #1
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e006      	b.n	80019d8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
  }
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40006400 	.word	0x40006400

080019e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d12e      	bne.n	8001a5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fddc 	bl	80015d0 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a1a:	e012      	b.n	8001a42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a1c:	f7ff fdd8 	bl	80015d0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d90b      	bls.n	8001a42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2205      	movs	r2, #5
 8001a3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e012      	b.n	8001a68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e5      	bne.n	8001a1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e006      	b.n	8001a68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a84:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_GetRxMessage+0x24>
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	f040 80f3 	bne.w	8001c7a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10e      	bne.n	8001ab8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d116      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0e7      	b.n	8001c88 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d107      	bne.n	8001ad6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0d8      	b.n	8001c88 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	331b      	adds	r3, #27
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0204 	and.w	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10c      	bne.n	8001b0e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	331b      	adds	r3, #27
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	4413      	add	r3, r2
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0d5b      	lsrs	r3, r3, #21
 8001b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e00b      	b.n	8001b26 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	331b      	adds	r3, #27
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	4413      	add	r3, r2
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	331b      	adds	r3, #27
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0202 	and.w	r2, r3, #2
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	331b      	adds	r3, #27
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 020f 	and.w	r2, r3, #15
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	331b      	adds	r3, #27
 8001b5c:	011b      	lsls	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	3304      	adds	r3, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	331b      	adds	r3, #27
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	0a1a      	lsrs	r2, r3, #8
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0c1a      	lsrs	r2, r3, #16
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	3302      	adds	r3, #2
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	0e1a      	lsrs	r2, r3, #24
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	3303      	adds	r3, #3
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	0a1a      	lsrs	r2, r3, #8
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	3305      	adds	r3, #5
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	0c1a      	lsrs	r2, r3, #16
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3306      	adds	r3, #6
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e1a      	lsrs	r2, r3, #24
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3307      	adds	r3, #7
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0220 	orr.w	r2, r2, #32
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	e007      	b.n	8001c76 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0220 	orr.w	r2, r2, #32
 8001c74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e006      	b.n	8001c88 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d002      	beq.n	8001cb2 <HAL_CAN_ActivateNotification+0x1e>
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d109      	bne.n	8001cc6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6959      	ldr	r1, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e006      	b.n	8001cd4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
  }
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d07c      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f983 	bl	800204e <HAL_CAN_TxMailbox0CompleteCallback>
 8001d48:	e016      	b.n	8001d78 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5c:	e00c      	b.n	8001d78 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	e002      	b.n	8001d78 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f989 	bl	800208a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d024      	beq.n	8001dcc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f963 	bl	8002062 <HAL_CAN_TxMailbox1CompleteCallback>
 8001d9c:	e016      	b.n	8001dcc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e00c      	b.n	8001dcc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d004      	beq.n	8001dc6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	e002      	b.n	8001dcc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f969 	bl	800209e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d024      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f943 	bl	8002076 <HAL_CAN_TxMailbox2CompleteCallback>
 8001df0:	e016      	b.n	8001e20 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
 8001e04:	e00c      	b.n	8001e20 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	e002      	b.n	8001e20 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f949 	bl	80020b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d007      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f930 	bl	80020c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff f810 	bl	8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2210      	movs	r2, #16
 8001ea6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ea8:	6a3b      	ldr	r3, [r7, #32]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00b      	beq.n	8001eca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f912 	bl	80020ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8f9 	bl	80020da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2210      	movs	r2, #16
 8001f02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f8fc 	bl	8002102 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00b      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2208      	movs	r2, #8
 8001f24:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8f5 	bl	8002116 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d07b      	beq.n	800202e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d072      	beq.n	8002026 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d043      	beq.n	8002026 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03e      	beq.n	8002026 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fae:	2b60      	cmp	r3, #96	; 0x60
 8001fb0:	d02b      	beq.n	800200a <HAL_CAN_IRQHandler+0x32a>
 8001fb2:	2b60      	cmp	r3, #96	; 0x60
 8001fb4:	d82e      	bhi.n	8002014 <HAL_CAN_IRQHandler+0x334>
 8001fb6:	2b50      	cmp	r3, #80	; 0x50
 8001fb8:	d022      	beq.n	8002000 <HAL_CAN_IRQHandler+0x320>
 8001fba:	2b50      	cmp	r3, #80	; 0x50
 8001fbc:	d82a      	bhi.n	8002014 <HAL_CAN_IRQHandler+0x334>
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d019      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x316>
 8001fc2:	2b40      	cmp	r3, #64	; 0x40
 8001fc4:	d826      	bhi.n	8002014 <HAL_CAN_IRQHandler+0x334>
 8001fc6:	2b30      	cmp	r3, #48	; 0x30
 8001fc8:	d010      	beq.n	8001fec <HAL_CAN_IRQHandler+0x30c>
 8001fca:	2b30      	cmp	r3, #48	; 0x30
 8001fcc:	d822      	bhi.n	8002014 <HAL_CAN_IRQHandler+0x334>
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d002      	beq.n	8001fd8 <HAL_CAN_IRQHandler+0x2f8>
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d005      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fd6:	e01d      	b.n	8002014 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	f043 0308 	orr.w	r3, r3, #8
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe0:	e019      	b.n	8002016 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	f043 0310 	orr.w	r3, r3, #16
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fea:	e014      	b.n	8002016 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff4:	e00f      	b.n	8002016 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ffe:	e00a      	b.n	8002016 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002008:	e005      	b.n	8002016 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002012:	e000      	b.n	8002016 <HAL_CAN_IRQHandler+0x336>
            break;
 8002014:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002024:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2204      	movs	r2, #4
 800202c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f872 	bl	800212a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	; 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	; (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	; (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	; (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ac:	d301      	bcc.n	80022b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00f      	b.n	80022d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <SysTick_Config+0x40>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ba:	210f      	movs	r1, #15
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c0:	f7ff ff8e 	bl	80021e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <SysTick_Config+0x40>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <SysTick_Config+0x40>)
 80022cc:	2207      	movs	r2, #7
 80022ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000e010 	.word	0xe000e010

080022e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff29 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b086      	sub	sp, #24
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002308:	f7ff ff3e 	bl	8002188 <__NVIC_GetPriorityGrouping>
 800230c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff ff8e 	bl	8002234 <NVIC_EncodePriority>
 8002318:	4602      	mov	r2, r0
 800231a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff5d 	bl	80021e0 <__NVIC_SetPriority>
}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff31 	bl	80021a4 <__NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffa2 	bl	800229c <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e16b      	b.n	8002658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 815a 	bne.w	8002652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80b4 	beq.w	8002652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b60      	ldr	r3, [pc, #384]	; (8002670 <HAL_GPIO_Init+0x30c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	4a5f      	ldr	r2, [pc, #380]	; (8002670 <HAL_GPIO_Init+0x30c>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	; 0x44
 80024fa:	4b5d      	ldr	r3, [pc, #372]	; (8002670 <HAL_GPIO_Init+0x30c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a5b      	ldr	r2, [pc, #364]	; (8002674 <HAL_GPIO_Init+0x310>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_GPIO_Init+0x314>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d02b      	beq.n	800258a <HAL_GPIO_Init+0x226>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a51      	ldr	r2, [pc, #324]	; (800267c <HAL_GPIO_Init+0x318>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d025      	beq.n	8002586 <HAL_GPIO_Init+0x222>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <HAL_GPIO_Init+0x31c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d01f      	beq.n	8002582 <HAL_GPIO_Init+0x21e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_GPIO_Init+0x320>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x21a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a4e      	ldr	r2, [pc, #312]	; (8002688 <HAL_GPIO_Init+0x324>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x216>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4d      	ldr	r2, [pc, #308]	; (800268c <HAL_GPIO_Init+0x328>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x212>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4c      	ldr	r2, [pc, #304]	; (8002690 <HAL_GPIO_Init+0x32c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x20e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4b      	ldr	r2, [pc, #300]	; (8002694 <HAL_GPIO_Init+0x330>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x20a>
 800256a:	2307      	movs	r3, #7
 800256c:	e00e      	b.n	800258c <HAL_GPIO_Init+0x228>
 800256e:	2308      	movs	r3, #8
 8002570:	e00c      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002572:	2306      	movs	r3, #6
 8002574:	e00a      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002576:	2305      	movs	r3, #5
 8002578:	e008      	b.n	800258c <HAL_GPIO_Init+0x228>
 800257a:	2304      	movs	r3, #4
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x228>
 800257e:	2303      	movs	r3, #3
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x228>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x228>
 800258a:	2300      	movs	r3, #0
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259c:	4935      	ldr	r1, [pc, #212]	; (8002674 <HAL_GPIO_Init+0x310>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025aa:	4b3b      	ldr	r3, [pc, #236]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ce:	4a32      	ldr	r2, [pc, #200]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f8:	4a27      	ldr	r2, [pc, #156]	; (8002698 <HAL_GPIO_Init+0x334>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025fe:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_GPIO_Init+0x334>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_GPIO_Init+0x334>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_GPIO_Init+0x334>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	f67f ae90 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40013800 	.word	0x40013800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020400 	.word	0x40020400
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40021400 	.word	0x40021400
 8002690:	40021800 	.word	0x40021800
 8002694:	40021c00 	.word	0x40021c00
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026e0:	887a      	ldrh	r2, [r7, #2]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	041a      	lsls	r2, r3, #16
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	400b      	ands	r3, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e267      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d075      	beq.n	800280e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002722:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b04      	cmp	r3, #4
 800272c:	d00c      	beq.n	8002748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800272e:	4b85      	ldr	r3, [pc, #532]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002736:	2b08      	cmp	r3, #8
 8002738:	d112      	bne.n	8002760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273a:	4b82      	ldr	r3, [pc, #520]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002746:	d10b      	bne.n	8002760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05b      	beq.n	800280c <HAL_RCC_OscConfig+0x108>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d157      	bne.n	800280c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e242      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d106      	bne.n	8002778 <HAL_RCC_OscConfig+0x74>
 800276a:	4b76      	ldr	r3, [pc, #472]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a75      	ldr	r2, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	e01d      	b.n	80027b4 <HAL_RCC_OscConfig+0xb0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x98>
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6f      	ldr	r2, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6c      	ldr	r2, [pc, #432]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0xb0>
 800279c:	4b69      	ldr	r3, [pc, #420]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a68      	ldr	r2, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b66      	ldr	r3, [pc, #408]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a65      	ldr	r2, [pc, #404]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe ff08 	bl	80015d0 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c4:	f7fe ff04 	bl	80015d0 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e207      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0xc0>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fef4 	bl	80015d0 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fef0 	bl	80015d0 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1f3      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	4b51      	ldr	r3, [pc, #324]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0xe8>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800282e:	2b08      	cmp	r3, #8
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002832:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x152>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1c7      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4937      	ldr	r1, [pc, #220]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_OscConfig+0x244>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fea9 	bl	80015d0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fea5 	bl	80015d0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1a8      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4925      	ldr	r1, [pc, #148]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_OscConfig+0x244>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fe88 	bl	80015d0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe fe84 	bl	80015d0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e187      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d036      	beq.n	800295c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_RCC_OscConfig+0x248>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fe68 	bl	80015d0 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fe64 	bl	80015d0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e167      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_OscConfig+0x240>)
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x200>
 8002922:	e01b      	b.n	800295c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_OscConfig+0x248>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292a:	f7fe fe51 	bl	80015d0 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	e00e      	b.n	8002950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002932:	f7fe fe4d 	bl	80015d0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d907      	bls.n	8002950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e150      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
 8002944:	40023800 	.word	0x40023800
 8002948:	42470000 	.word	0x42470000
 800294c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ea      	bne.n	8002932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8097 	beq.w	8002a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296e:	4b81      	ldr	r3, [pc, #516]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b7d      	ldr	r3, [pc, #500]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a7c      	ldr	r2, [pc, #496]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b77      	ldr	r3, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b74      	ldr	r3, [pc, #464]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a73      	ldr	r2, [pc, #460]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fe0d 	bl	80015d0 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fe09 	bl	80015d0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e10c      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x474>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x2ea>
 80029e0:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a63      	ldr	r2, [pc, #396]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e01c      	b.n	8002a28 <HAL_RCC_OscConfig+0x324>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x30c>
 80029f6:	4b5f      	ldr	r3, [pc, #380]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a5e      	ldr	r2, [pc, #376]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
 8002a02:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a5b      	ldr	r2, [pc, #364]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0x324>
 8002a10:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a57      	ldr	r2, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a54      	ldr	r2, [pc, #336]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fdce 	bl	80015d0 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fdca 	bl	80015d0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0cb      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4e:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ee      	beq.n	8002a38 <HAL_RCC_OscConfig+0x334>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fdb8 	bl	80015d0 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7fe fdb4 	bl	80015d0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0b5      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7a:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ee      	bne.n	8002a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80a1 	beq.w	8002be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa2:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d05c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d141      	bne.n	8002b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <HAL_RCC_OscConfig+0x478>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe fd88 	bl	80015d0 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fd84 	bl	80015d0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e087      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	491b      	ldr	r1, [pc, #108]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x478>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe fd5d 	bl	80015d0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fd59 	bl	80015d0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e05c      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x416>
 8002b38:	e054      	b.n	8002be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x478>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fd46 	bl	80015d0 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fd42 	bl	80015d0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e045      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x444>
 8002b66:	e03d      	b.n	8002be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e038      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x4ec>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d028      	beq.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d121      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d111      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0cc      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d90c      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b63      	ldr	r3, [pc, #396]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	494d      	ldr	r1, [pc, #308]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d044      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d119      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e06f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e067      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd2:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f023 0203 	bic.w	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4934      	ldr	r1, [pc, #208]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fc74 	bl	80015d0 <HAL_GetTick>
 8002ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cea:	e00a      	b.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cec:	f7fe fc70 	bl	80015d0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e04f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 020c 	and.w	r2, r3, #12
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1eb      	bne.n	8002cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d20c      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	; (8002dac <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4916      	ldr	r1, [pc, #88]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	490e      	ldr	r1, [pc, #56]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 f821 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	490a      	ldr	r1, [pc, #40]	; (8002db4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	5ccb      	ldrb	r3, [r1, r3]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fbd4 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40023c00 	.word	0x40023c00
 8002db0:	40023800 	.word	0x40023800
 8002db4:	08005960 	.word	0x08005960
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b094      	sub	sp, #80	; 0x50
 8002dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
 8002dcc:	2300      	movs	r3, #0
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dd8:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d00d      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x40>
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	f200 80e1 	bhi.w	8002fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d003      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002df2:	e0db      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002df8:	e0db      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dfa:	4b73      	ldr	r3, [pc, #460]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dfe:	e0d8      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e00:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e0a:	4b6d      	ldr	r3, [pc, #436]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b6a      	ldr	r3, [pc, #424]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e28:	633b      	str	r3, [r7, #48]	; 0x30
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e32:	4622      	mov	r2, r4
 8002e34:	462b      	mov	r3, r5
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	1a51      	subs	r1, r2, r1
 8002e4e:	6139      	str	r1, [r7, #16]
 8002e50:	4629      	mov	r1, r5
 8002e52:	eb63 0301 	sbc.w	r3, r3, r1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e64:	4659      	mov	r1, fp
 8002e66:	018b      	lsls	r3, r1, #6
 8002e68:	4651      	mov	r1, sl
 8002e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e6e:	4651      	mov	r1, sl
 8002e70:	018a      	lsls	r2, r1, #6
 8002e72:	4651      	mov	r1, sl
 8002e74:	ebb2 0801 	subs.w	r8, r2, r1
 8002e78:	4659      	mov	r1, fp
 8002e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	eb18 0303 	adds.w	r3, r8, r3
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	462b      	mov	r3, r5
 8002ea0:	eb49 0303 	adc.w	r3, r9, r3
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	024b      	lsls	r3, r1, #9
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ebc:	4621      	mov	r1, r4
 8002ebe:	024a      	lsls	r2, r1, #9
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ed0:	f7fd fe6a 	bl	8000ba8 <__aeabi_uldivmod>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002edc:	e058      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ede:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	099b      	lsrs	r3, r3, #6
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	4611      	mov	r1, r2
 8002eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eee:	623b      	str	r3, [r7, #32]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	f04f 0000 	mov.w	r0, #0
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	0159      	lsls	r1, r3, #5
 8002f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f0a:	0150      	lsls	r0, r2, #5
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4641      	mov	r1, r8
 8002f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f16:	4649      	mov	r1, r9
 8002f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f30:	ebb2 040a 	subs.w	r4, r2, sl
 8002f34:	eb63 050b 	sbc.w	r5, r3, fp
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	464b      	mov	r3, r9
 8002f54:	eb45 0303 	adc.w	r3, r5, r3
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f70:	4621      	mov	r1, r4
 8002f72:	028a      	lsls	r2, r1, #10
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	61fa      	str	r2, [r7, #28]
 8002f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f84:	f7fd fe10 	bl	8000ba8 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3750      	adds	r7, #80	; 0x50
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400
 8002fc8:	007a1200 	.word	0x007a1200

08002fcc <__cvt>:
 8002fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	ec55 4b10 	vmov	r4, r5, d0
 8002fd4:	2d00      	cmp	r5, #0
 8002fd6:	460e      	mov	r6, r1
 8002fd8:	4619      	mov	r1, r3
 8002fda:	462b      	mov	r3, r5
 8002fdc:	bfbb      	ittet	lt
 8002fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002fe2:	461d      	movlt	r5, r3
 8002fe4:	2300      	movge	r3, #0
 8002fe6:	232d      	movlt	r3, #45	; 0x2d
 8002fe8:	700b      	strb	r3, [r1, #0]
 8002fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002ff0:	4691      	mov	r9, r2
 8002ff2:	f023 0820 	bic.w	r8, r3, #32
 8002ff6:	bfbc      	itt	lt
 8002ff8:	4622      	movlt	r2, r4
 8002ffa:	4614      	movlt	r4, r2
 8002ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003000:	d005      	beq.n	800300e <__cvt+0x42>
 8003002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003006:	d100      	bne.n	800300a <__cvt+0x3e>
 8003008:	3601      	adds	r6, #1
 800300a:	2102      	movs	r1, #2
 800300c:	e000      	b.n	8003010 <__cvt+0x44>
 800300e:	2103      	movs	r1, #3
 8003010:	ab03      	add	r3, sp, #12
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	ab02      	add	r3, sp, #8
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	ec45 4b10 	vmov	d0, r4, r5
 800301c:	4653      	mov	r3, sl
 800301e:	4632      	mov	r2, r6
 8003020:	f000 fe4a 	bl	8003cb8 <_dtoa_r>
 8003024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003028:	4607      	mov	r7, r0
 800302a:	d102      	bne.n	8003032 <__cvt+0x66>
 800302c:	f019 0f01 	tst.w	r9, #1
 8003030:	d022      	beq.n	8003078 <__cvt+0xac>
 8003032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003036:	eb07 0906 	add.w	r9, r7, r6
 800303a:	d110      	bne.n	800305e <__cvt+0x92>
 800303c:	783b      	ldrb	r3, [r7, #0]
 800303e:	2b30      	cmp	r3, #48	; 0x30
 8003040:	d10a      	bne.n	8003058 <__cvt+0x8c>
 8003042:	2200      	movs	r2, #0
 8003044:	2300      	movs	r3, #0
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f7fd fd3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800304e:	b918      	cbnz	r0, 8003058 <__cvt+0x8c>
 8003050:	f1c6 0601 	rsb	r6, r6, #1
 8003054:	f8ca 6000 	str.w	r6, [sl]
 8003058:	f8da 3000 	ldr.w	r3, [sl]
 800305c:	4499      	add	r9, r3
 800305e:	2200      	movs	r2, #0
 8003060:	2300      	movs	r3, #0
 8003062:	4620      	mov	r0, r4
 8003064:	4629      	mov	r1, r5
 8003066:	f7fd fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800306a:	b108      	cbz	r0, 8003070 <__cvt+0xa4>
 800306c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003070:	2230      	movs	r2, #48	; 0x30
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	454b      	cmp	r3, r9
 8003076:	d307      	bcc.n	8003088 <__cvt+0xbc>
 8003078:	9b03      	ldr	r3, [sp, #12]
 800307a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800307c:	1bdb      	subs	r3, r3, r7
 800307e:	4638      	mov	r0, r7
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	b004      	add	sp, #16
 8003084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	9103      	str	r1, [sp, #12]
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e7f0      	b.n	8003072 <__cvt+0xa6>

08003090 <__exponent>:
 8003090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003092:	4603      	mov	r3, r0
 8003094:	2900      	cmp	r1, #0
 8003096:	bfb8      	it	lt
 8003098:	4249      	neglt	r1, r1
 800309a:	f803 2b02 	strb.w	r2, [r3], #2
 800309e:	bfb4      	ite	lt
 80030a0:	222d      	movlt	r2, #45	; 0x2d
 80030a2:	222b      	movge	r2, #43	; 0x2b
 80030a4:	2909      	cmp	r1, #9
 80030a6:	7042      	strb	r2, [r0, #1]
 80030a8:	dd2a      	ble.n	8003100 <__exponent+0x70>
 80030aa:	f10d 0207 	add.w	r2, sp, #7
 80030ae:	4617      	mov	r7, r2
 80030b0:	260a      	movs	r6, #10
 80030b2:	4694      	mov	ip, r2
 80030b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80030b8:	fb06 1415 	mls	r4, r6, r5, r1
 80030bc:	3430      	adds	r4, #48	; 0x30
 80030be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80030c2:	460c      	mov	r4, r1
 80030c4:	2c63      	cmp	r4, #99	; 0x63
 80030c6:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80030ca:	4629      	mov	r1, r5
 80030cc:	dcf1      	bgt.n	80030b2 <__exponent+0x22>
 80030ce:	3130      	adds	r1, #48	; 0x30
 80030d0:	f1ac 0402 	sub.w	r4, ip, #2
 80030d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80030d8:	1c41      	adds	r1, r0, #1
 80030da:	4622      	mov	r2, r4
 80030dc:	42ba      	cmp	r2, r7
 80030de:	d30a      	bcc.n	80030f6 <__exponent+0x66>
 80030e0:	f10d 0209 	add.w	r2, sp, #9
 80030e4:	eba2 020c 	sub.w	r2, r2, ip
 80030e8:	42bc      	cmp	r4, r7
 80030ea:	bf88      	it	hi
 80030ec:	2200      	movhi	r2, #0
 80030ee:	4413      	add	r3, r2
 80030f0:	1a18      	subs	r0, r3, r0
 80030f2:	b003      	add	sp, #12
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80030fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80030fe:	e7ed      	b.n	80030dc <__exponent+0x4c>
 8003100:	2330      	movs	r3, #48	; 0x30
 8003102:	3130      	adds	r1, #48	; 0x30
 8003104:	7083      	strb	r3, [r0, #2]
 8003106:	70c1      	strb	r1, [r0, #3]
 8003108:	1d03      	adds	r3, r0, #4
 800310a:	e7f1      	b.n	80030f0 <__exponent+0x60>

0800310c <_printf_float>:
 800310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003110:	ed2d 8b02 	vpush	{d8}
 8003114:	b08d      	sub	sp, #52	; 0x34
 8003116:	460c      	mov	r4, r1
 8003118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800311c:	4616      	mov	r6, r2
 800311e:	461f      	mov	r7, r3
 8003120:	4605      	mov	r5, r0
 8003122:	f000 fcc7 	bl	8003ab4 <_localeconv_r>
 8003126:	f8d0 a000 	ldr.w	sl, [r0]
 800312a:	4650      	mov	r0, sl
 800312c:	f7fd f8a0 	bl	8000270 <strlen>
 8003130:	2300      	movs	r3, #0
 8003132:	930a      	str	r3, [sp, #40]	; 0x28
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	9305      	str	r3, [sp, #20]
 8003138:	f8d8 3000 	ldr.w	r3, [r8]
 800313c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003140:	3307      	adds	r3, #7
 8003142:	f023 0307 	bic.w	r3, r3, #7
 8003146:	f103 0208 	add.w	r2, r3, #8
 800314a:	f8c8 2000 	str.w	r2, [r8]
 800314e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003156:	9307      	str	r3, [sp, #28]
 8003158:	f8cd 8018 	str.w	r8, [sp, #24]
 800315c:	ee08 0a10 	vmov	s16, r0
 8003160:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003168:	4b9e      	ldr	r3, [pc, #632]	; (80033e4 <_printf_float+0x2d8>)
 800316a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800316e:	f7fd fcdd 	bl	8000b2c <__aeabi_dcmpun>
 8003172:	bb88      	cbnz	r0, 80031d8 <_printf_float+0xcc>
 8003174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003178:	4b9a      	ldr	r3, [pc, #616]	; (80033e4 <_printf_float+0x2d8>)
 800317a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317e:	f7fd fcb7 	bl	8000af0 <__aeabi_dcmple>
 8003182:	bb48      	cbnz	r0, 80031d8 <_printf_float+0xcc>
 8003184:	2200      	movs	r2, #0
 8003186:	2300      	movs	r3, #0
 8003188:	4640      	mov	r0, r8
 800318a:	4649      	mov	r1, r9
 800318c:	f7fd fca6 	bl	8000adc <__aeabi_dcmplt>
 8003190:	b110      	cbz	r0, 8003198 <_printf_float+0x8c>
 8003192:	232d      	movs	r3, #45	; 0x2d
 8003194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003198:	4a93      	ldr	r2, [pc, #588]	; (80033e8 <_printf_float+0x2dc>)
 800319a:	4b94      	ldr	r3, [pc, #592]	; (80033ec <_printf_float+0x2e0>)
 800319c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80031a0:	bf94      	ite	ls
 80031a2:	4690      	movls	r8, r2
 80031a4:	4698      	movhi	r8, r3
 80031a6:	2303      	movs	r3, #3
 80031a8:	6123      	str	r3, [r4, #16]
 80031aa:	9b05      	ldr	r3, [sp, #20]
 80031ac:	f023 0304 	bic.w	r3, r3, #4
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	f04f 0900 	mov.w	r9, #0
 80031b6:	9700      	str	r7, [sp, #0]
 80031b8:	4633      	mov	r3, r6
 80031ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80031bc:	4621      	mov	r1, r4
 80031be:	4628      	mov	r0, r5
 80031c0:	f000 f9da 	bl	8003578 <_printf_common>
 80031c4:	3001      	adds	r0, #1
 80031c6:	f040 8090 	bne.w	80032ea <_printf_float+0x1de>
 80031ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ce:	b00d      	add	sp, #52	; 0x34
 80031d0:	ecbd 8b02 	vpop	{d8}
 80031d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	4640      	mov	r0, r8
 80031de:	4649      	mov	r1, r9
 80031e0:	f7fd fca4 	bl	8000b2c <__aeabi_dcmpun>
 80031e4:	b140      	cbz	r0, 80031f8 <_printf_float+0xec>
 80031e6:	464b      	mov	r3, r9
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bfbc      	itt	lt
 80031ec:	232d      	movlt	r3, #45	; 0x2d
 80031ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80031f2:	4a7f      	ldr	r2, [pc, #508]	; (80033f0 <_printf_float+0x2e4>)
 80031f4:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <_printf_float+0x2e8>)
 80031f6:	e7d1      	b.n	800319c <_printf_float+0x90>
 80031f8:	6863      	ldr	r3, [r4, #4]
 80031fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80031fe:	9206      	str	r2, [sp, #24]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	d13f      	bne.n	8003284 <_printf_float+0x178>
 8003204:	2306      	movs	r3, #6
 8003206:	6063      	str	r3, [r4, #4]
 8003208:	9b05      	ldr	r3, [sp, #20]
 800320a:	6861      	ldr	r1, [r4, #4]
 800320c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003210:	2300      	movs	r3, #0
 8003212:	9303      	str	r3, [sp, #12]
 8003214:	ab0a      	add	r3, sp, #40	; 0x28
 8003216:	e9cd b301 	strd	fp, r3, [sp, #4]
 800321a:	ab09      	add	r3, sp, #36	; 0x24
 800321c:	ec49 8b10 	vmov	d0, r8, r9
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6022      	str	r2, [r4, #0]
 8003224:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003228:	4628      	mov	r0, r5
 800322a:	f7ff fecf 	bl	8002fcc <__cvt>
 800322e:	9b06      	ldr	r3, [sp, #24]
 8003230:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003232:	2b47      	cmp	r3, #71	; 0x47
 8003234:	4680      	mov	r8, r0
 8003236:	d108      	bne.n	800324a <_printf_float+0x13e>
 8003238:	1cc8      	adds	r0, r1, #3
 800323a:	db02      	blt.n	8003242 <_printf_float+0x136>
 800323c:	6863      	ldr	r3, [r4, #4]
 800323e:	4299      	cmp	r1, r3
 8003240:	dd41      	ble.n	80032c6 <_printf_float+0x1ba>
 8003242:	f1ab 0302 	sub.w	r3, fp, #2
 8003246:	fa5f fb83 	uxtb.w	fp, r3
 800324a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800324e:	d820      	bhi.n	8003292 <_printf_float+0x186>
 8003250:	3901      	subs	r1, #1
 8003252:	465a      	mov	r2, fp
 8003254:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003258:	9109      	str	r1, [sp, #36]	; 0x24
 800325a:	f7ff ff19 	bl	8003090 <__exponent>
 800325e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003260:	1813      	adds	r3, r2, r0
 8003262:	2a01      	cmp	r2, #1
 8003264:	4681      	mov	r9, r0
 8003266:	6123      	str	r3, [r4, #16]
 8003268:	dc02      	bgt.n	8003270 <_printf_float+0x164>
 800326a:	6822      	ldr	r2, [r4, #0]
 800326c:	07d2      	lsls	r2, r2, #31
 800326e:	d501      	bpl.n	8003274 <_printf_float+0x168>
 8003270:	3301      	adds	r3, #1
 8003272:	6123      	str	r3, [r4, #16]
 8003274:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003278:	2b00      	cmp	r3, #0
 800327a:	d09c      	beq.n	80031b6 <_printf_float+0xaa>
 800327c:	232d      	movs	r3, #45	; 0x2d
 800327e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003282:	e798      	b.n	80031b6 <_printf_float+0xaa>
 8003284:	9a06      	ldr	r2, [sp, #24]
 8003286:	2a47      	cmp	r2, #71	; 0x47
 8003288:	d1be      	bne.n	8003208 <_printf_float+0xfc>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1bc      	bne.n	8003208 <_printf_float+0xfc>
 800328e:	2301      	movs	r3, #1
 8003290:	e7b9      	b.n	8003206 <_printf_float+0xfa>
 8003292:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003296:	d118      	bne.n	80032ca <_printf_float+0x1be>
 8003298:	2900      	cmp	r1, #0
 800329a:	6863      	ldr	r3, [r4, #4]
 800329c:	dd0b      	ble.n	80032b6 <_printf_float+0x1aa>
 800329e:	6121      	str	r1, [r4, #16]
 80032a0:	b913      	cbnz	r3, 80032a8 <_printf_float+0x19c>
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	07d0      	lsls	r0, r2, #31
 80032a6:	d502      	bpl.n	80032ae <_printf_float+0x1a2>
 80032a8:	3301      	adds	r3, #1
 80032aa:	440b      	add	r3, r1
 80032ac:	6123      	str	r3, [r4, #16]
 80032ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80032b0:	f04f 0900 	mov.w	r9, #0
 80032b4:	e7de      	b.n	8003274 <_printf_float+0x168>
 80032b6:	b913      	cbnz	r3, 80032be <_printf_float+0x1b2>
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	07d2      	lsls	r2, r2, #31
 80032bc:	d501      	bpl.n	80032c2 <_printf_float+0x1b6>
 80032be:	3302      	adds	r3, #2
 80032c0:	e7f4      	b.n	80032ac <_printf_float+0x1a0>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e7f2      	b.n	80032ac <_printf_float+0x1a0>
 80032c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80032ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032cc:	4299      	cmp	r1, r3
 80032ce:	db05      	blt.n	80032dc <_printf_float+0x1d0>
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	6121      	str	r1, [r4, #16]
 80032d4:	07d8      	lsls	r0, r3, #31
 80032d6:	d5ea      	bpl.n	80032ae <_printf_float+0x1a2>
 80032d8:	1c4b      	adds	r3, r1, #1
 80032da:	e7e7      	b.n	80032ac <_printf_float+0x1a0>
 80032dc:	2900      	cmp	r1, #0
 80032de:	bfd4      	ite	le
 80032e0:	f1c1 0202 	rsble	r2, r1, #2
 80032e4:	2201      	movgt	r2, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	e7e0      	b.n	80032ac <_printf_float+0x1a0>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	055a      	lsls	r2, r3, #21
 80032ee:	d407      	bmi.n	8003300 <_printf_float+0x1f4>
 80032f0:	6923      	ldr	r3, [r4, #16]
 80032f2:	4642      	mov	r2, r8
 80032f4:	4631      	mov	r1, r6
 80032f6:	4628      	mov	r0, r5
 80032f8:	47b8      	blx	r7
 80032fa:	3001      	adds	r0, #1
 80032fc:	d12c      	bne.n	8003358 <_printf_float+0x24c>
 80032fe:	e764      	b.n	80031ca <_printf_float+0xbe>
 8003300:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003304:	f240 80e0 	bls.w	80034c8 <_printf_float+0x3bc>
 8003308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800330c:	2200      	movs	r2, #0
 800330e:	2300      	movs	r3, #0
 8003310:	f7fd fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 8003314:	2800      	cmp	r0, #0
 8003316:	d034      	beq.n	8003382 <_printf_float+0x276>
 8003318:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <_printf_float+0x2ec>)
 800331a:	2301      	movs	r3, #1
 800331c:	4631      	mov	r1, r6
 800331e:	4628      	mov	r0, r5
 8003320:	47b8      	blx	r7
 8003322:	3001      	adds	r0, #1
 8003324:	f43f af51 	beq.w	80031ca <_printf_float+0xbe>
 8003328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800332c:	429a      	cmp	r2, r3
 800332e:	db02      	blt.n	8003336 <_printf_float+0x22a>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	07d8      	lsls	r0, r3, #31
 8003334:	d510      	bpl.n	8003358 <_printf_float+0x24c>
 8003336:	ee18 3a10 	vmov	r3, s16
 800333a:	4652      	mov	r2, sl
 800333c:	4631      	mov	r1, r6
 800333e:	4628      	mov	r0, r5
 8003340:	47b8      	blx	r7
 8003342:	3001      	adds	r0, #1
 8003344:	f43f af41 	beq.w	80031ca <_printf_float+0xbe>
 8003348:	f04f 0800 	mov.w	r8, #0
 800334c:	f104 091a 	add.w	r9, r4, #26
 8003350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	4543      	cmp	r3, r8
 8003356:	dc09      	bgt.n	800336c <_printf_float+0x260>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	079b      	lsls	r3, r3, #30
 800335c:	f100 8107 	bmi.w	800356e <_printf_float+0x462>
 8003360:	68e0      	ldr	r0, [r4, #12]
 8003362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003364:	4298      	cmp	r0, r3
 8003366:	bfb8      	it	lt
 8003368:	4618      	movlt	r0, r3
 800336a:	e730      	b.n	80031ce <_printf_float+0xc2>
 800336c:	2301      	movs	r3, #1
 800336e:	464a      	mov	r2, r9
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	47b8      	blx	r7
 8003376:	3001      	adds	r0, #1
 8003378:	f43f af27 	beq.w	80031ca <_printf_float+0xbe>
 800337c:	f108 0801 	add.w	r8, r8, #1
 8003380:	e7e6      	b.n	8003350 <_printf_float+0x244>
 8003382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	dc39      	bgt.n	80033fc <_printf_float+0x2f0>
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <_printf_float+0x2ec>)
 800338a:	2301      	movs	r3, #1
 800338c:	4631      	mov	r1, r6
 800338e:	4628      	mov	r0, r5
 8003390:	47b8      	blx	r7
 8003392:	3001      	adds	r0, #1
 8003394:	f43f af19 	beq.w	80031ca <_printf_float+0xbe>
 8003398:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800339c:	4313      	orrs	r3, r2
 800339e:	d102      	bne.n	80033a6 <_printf_float+0x29a>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	07d9      	lsls	r1, r3, #31
 80033a4:	d5d8      	bpl.n	8003358 <_printf_float+0x24c>
 80033a6:	ee18 3a10 	vmov	r3, s16
 80033aa:	4652      	mov	r2, sl
 80033ac:	4631      	mov	r1, r6
 80033ae:	4628      	mov	r0, r5
 80033b0:	47b8      	blx	r7
 80033b2:	3001      	adds	r0, #1
 80033b4:	f43f af09 	beq.w	80031ca <_printf_float+0xbe>
 80033b8:	f04f 0900 	mov.w	r9, #0
 80033bc:	f104 0a1a 	add.w	sl, r4, #26
 80033c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033c2:	425b      	negs	r3, r3
 80033c4:	454b      	cmp	r3, r9
 80033c6:	dc01      	bgt.n	80033cc <_printf_float+0x2c0>
 80033c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033ca:	e792      	b.n	80032f2 <_printf_float+0x1e6>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4652      	mov	r2, sl
 80033d0:	4631      	mov	r1, r6
 80033d2:	4628      	mov	r0, r5
 80033d4:	47b8      	blx	r7
 80033d6:	3001      	adds	r0, #1
 80033d8:	f43f aef7 	beq.w	80031ca <_printf_float+0xbe>
 80033dc:	f109 0901 	add.w	r9, r9, #1
 80033e0:	e7ee      	b.n	80033c0 <_printf_float+0x2b4>
 80033e2:	bf00      	nop
 80033e4:	7fefffff 	.word	0x7fefffff
 80033e8:	08005970 	.word	0x08005970
 80033ec:	08005974 	.word	0x08005974
 80033f0:	08005978 	.word	0x08005978
 80033f4:	0800597c 	.word	0x0800597c
 80033f8:	08005980 	.word	0x08005980
 80033fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003400:	429a      	cmp	r2, r3
 8003402:	bfa8      	it	ge
 8003404:	461a      	movge	r2, r3
 8003406:	2a00      	cmp	r2, #0
 8003408:	4691      	mov	r9, r2
 800340a:	dc37      	bgt.n	800347c <_printf_float+0x370>
 800340c:	f04f 0b00 	mov.w	fp, #0
 8003410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003414:	f104 021a 	add.w	r2, r4, #26
 8003418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800341a:	9305      	str	r3, [sp, #20]
 800341c:	eba3 0309 	sub.w	r3, r3, r9
 8003420:	455b      	cmp	r3, fp
 8003422:	dc33      	bgt.n	800348c <_printf_float+0x380>
 8003424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003428:	429a      	cmp	r2, r3
 800342a:	db3b      	blt.n	80034a4 <_printf_float+0x398>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	07da      	lsls	r2, r3, #31
 8003430:	d438      	bmi.n	80034a4 <_printf_float+0x398>
 8003432:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003436:	eba2 0903 	sub.w	r9, r2, r3
 800343a:	9b05      	ldr	r3, [sp, #20]
 800343c:	1ad2      	subs	r2, r2, r3
 800343e:	4591      	cmp	r9, r2
 8003440:	bfa8      	it	ge
 8003442:	4691      	movge	r9, r2
 8003444:	f1b9 0f00 	cmp.w	r9, #0
 8003448:	dc35      	bgt.n	80034b6 <_printf_float+0x3aa>
 800344a:	f04f 0800 	mov.w	r8, #0
 800344e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003452:	f104 0a1a 	add.w	sl, r4, #26
 8003456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	eba3 0309 	sub.w	r3, r3, r9
 8003460:	4543      	cmp	r3, r8
 8003462:	f77f af79 	ble.w	8003358 <_printf_float+0x24c>
 8003466:	2301      	movs	r3, #1
 8003468:	4652      	mov	r2, sl
 800346a:	4631      	mov	r1, r6
 800346c:	4628      	mov	r0, r5
 800346e:	47b8      	blx	r7
 8003470:	3001      	adds	r0, #1
 8003472:	f43f aeaa 	beq.w	80031ca <_printf_float+0xbe>
 8003476:	f108 0801 	add.w	r8, r8, #1
 800347a:	e7ec      	b.n	8003456 <_printf_float+0x34a>
 800347c:	4613      	mov	r3, r2
 800347e:	4631      	mov	r1, r6
 8003480:	4642      	mov	r2, r8
 8003482:	4628      	mov	r0, r5
 8003484:	47b8      	blx	r7
 8003486:	3001      	adds	r0, #1
 8003488:	d1c0      	bne.n	800340c <_printf_float+0x300>
 800348a:	e69e      	b.n	80031ca <_printf_float+0xbe>
 800348c:	2301      	movs	r3, #1
 800348e:	4631      	mov	r1, r6
 8003490:	4628      	mov	r0, r5
 8003492:	9205      	str	r2, [sp, #20]
 8003494:	47b8      	blx	r7
 8003496:	3001      	adds	r0, #1
 8003498:	f43f ae97 	beq.w	80031ca <_printf_float+0xbe>
 800349c:	9a05      	ldr	r2, [sp, #20]
 800349e:	f10b 0b01 	add.w	fp, fp, #1
 80034a2:	e7b9      	b.n	8003418 <_printf_float+0x30c>
 80034a4:	ee18 3a10 	vmov	r3, s16
 80034a8:	4652      	mov	r2, sl
 80034aa:	4631      	mov	r1, r6
 80034ac:	4628      	mov	r0, r5
 80034ae:	47b8      	blx	r7
 80034b0:	3001      	adds	r0, #1
 80034b2:	d1be      	bne.n	8003432 <_printf_float+0x326>
 80034b4:	e689      	b.n	80031ca <_printf_float+0xbe>
 80034b6:	9a05      	ldr	r2, [sp, #20]
 80034b8:	464b      	mov	r3, r9
 80034ba:	4442      	add	r2, r8
 80034bc:	4631      	mov	r1, r6
 80034be:	4628      	mov	r0, r5
 80034c0:	47b8      	blx	r7
 80034c2:	3001      	adds	r0, #1
 80034c4:	d1c1      	bne.n	800344a <_printf_float+0x33e>
 80034c6:	e680      	b.n	80031ca <_printf_float+0xbe>
 80034c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034ca:	2a01      	cmp	r2, #1
 80034cc:	dc01      	bgt.n	80034d2 <_printf_float+0x3c6>
 80034ce:	07db      	lsls	r3, r3, #31
 80034d0:	d53a      	bpl.n	8003548 <_printf_float+0x43c>
 80034d2:	2301      	movs	r3, #1
 80034d4:	4642      	mov	r2, r8
 80034d6:	4631      	mov	r1, r6
 80034d8:	4628      	mov	r0, r5
 80034da:	47b8      	blx	r7
 80034dc:	3001      	adds	r0, #1
 80034de:	f43f ae74 	beq.w	80031ca <_printf_float+0xbe>
 80034e2:	ee18 3a10 	vmov	r3, s16
 80034e6:	4652      	mov	r2, sl
 80034e8:	4631      	mov	r1, r6
 80034ea:	4628      	mov	r0, r5
 80034ec:	47b8      	blx	r7
 80034ee:	3001      	adds	r0, #1
 80034f0:	f43f ae6b 	beq.w	80031ca <_printf_float+0xbe>
 80034f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034f8:	2200      	movs	r2, #0
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003500:	f7fd fae2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003504:	b9d8      	cbnz	r0, 800353e <_printf_float+0x432>
 8003506:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800350a:	f108 0201 	add.w	r2, r8, #1
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	d10e      	bne.n	8003536 <_printf_float+0x42a>
 8003518:	e657      	b.n	80031ca <_printf_float+0xbe>
 800351a:	2301      	movs	r3, #1
 800351c:	4652      	mov	r2, sl
 800351e:	4631      	mov	r1, r6
 8003520:	4628      	mov	r0, r5
 8003522:	47b8      	blx	r7
 8003524:	3001      	adds	r0, #1
 8003526:	f43f ae50 	beq.w	80031ca <_printf_float+0xbe>
 800352a:	f108 0801 	add.w	r8, r8, #1
 800352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	4543      	cmp	r3, r8
 8003534:	dcf1      	bgt.n	800351a <_printf_float+0x40e>
 8003536:	464b      	mov	r3, r9
 8003538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800353c:	e6da      	b.n	80032f4 <_printf_float+0x1e8>
 800353e:	f04f 0800 	mov.w	r8, #0
 8003542:	f104 0a1a 	add.w	sl, r4, #26
 8003546:	e7f2      	b.n	800352e <_printf_float+0x422>
 8003548:	2301      	movs	r3, #1
 800354a:	4642      	mov	r2, r8
 800354c:	e7df      	b.n	800350e <_printf_float+0x402>
 800354e:	2301      	movs	r3, #1
 8003550:	464a      	mov	r2, r9
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	47b8      	blx	r7
 8003558:	3001      	adds	r0, #1
 800355a:	f43f ae36 	beq.w	80031ca <_printf_float+0xbe>
 800355e:	f108 0801 	add.w	r8, r8, #1
 8003562:	68e3      	ldr	r3, [r4, #12]
 8003564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003566:	1a5b      	subs	r3, r3, r1
 8003568:	4543      	cmp	r3, r8
 800356a:	dcf0      	bgt.n	800354e <_printf_float+0x442>
 800356c:	e6f8      	b.n	8003360 <_printf_float+0x254>
 800356e:	f04f 0800 	mov.w	r8, #0
 8003572:	f104 0919 	add.w	r9, r4, #25
 8003576:	e7f4      	b.n	8003562 <_printf_float+0x456>

08003578 <_printf_common>:
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	4616      	mov	r6, r2
 800357e:	4699      	mov	r9, r3
 8003580:	688a      	ldr	r2, [r1, #8]
 8003582:	690b      	ldr	r3, [r1, #16]
 8003584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003588:	4293      	cmp	r3, r2
 800358a:	bfb8      	it	lt
 800358c:	4613      	movlt	r3, r2
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003594:	4607      	mov	r7, r0
 8003596:	460c      	mov	r4, r1
 8003598:	b10a      	cbz	r2, 800359e <_printf_common+0x26>
 800359a:	3301      	adds	r3, #1
 800359c:	6033      	str	r3, [r6, #0]
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	0699      	lsls	r1, r3, #26
 80035a2:	bf42      	ittt	mi
 80035a4:	6833      	ldrmi	r3, [r6, #0]
 80035a6:	3302      	addmi	r3, #2
 80035a8:	6033      	strmi	r3, [r6, #0]
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	f015 0506 	ands.w	r5, r5, #6
 80035b0:	d106      	bne.n	80035c0 <_printf_common+0x48>
 80035b2:	f104 0a19 	add.w	sl, r4, #25
 80035b6:	68e3      	ldr	r3, [r4, #12]
 80035b8:	6832      	ldr	r2, [r6, #0]
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	42ab      	cmp	r3, r5
 80035be:	dc26      	bgt.n	800360e <_printf_common+0x96>
 80035c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035c4:	1e13      	subs	r3, r2, #0
 80035c6:	6822      	ldr	r2, [r4, #0]
 80035c8:	bf18      	it	ne
 80035ca:	2301      	movne	r3, #1
 80035cc:	0692      	lsls	r2, r2, #26
 80035ce:	d42b      	bmi.n	8003628 <_printf_common+0xb0>
 80035d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d4:	4649      	mov	r1, r9
 80035d6:	4638      	mov	r0, r7
 80035d8:	47c0      	blx	r8
 80035da:	3001      	adds	r0, #1
 80035dc:	d01e      	beq.n	800361c <_printf_common+0xa4>
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	6922      	ldr	r2, [r4, #16]
 80035e2:	f003 0306 	and.w	r3, r3, #6
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	bf02      	ittt	eq
 80035ea:	68e5      	ldreq	r5, [r4, #12]
 80035ec:	6833      	ldreq	r3, [r6, #0]
 80035ee:	1aed      	subeq	r5, r5, r3
 80035f0:	68a3      	ldr	r3, [r4, #8]
 80035f2:	bf0c      	ite	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	2500      	movne	r5, #0
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bfc4      	itt	gt
 80035fe:	1a9b      	subgt	r3, r3, r2
 8003600:	18ed      	addgt	r5, r5, r3
 8003602:	2600      	movs	r6, #0
 8003604:	341a      	adds	r4, #26
 8003606:	42b5      	cmp	r5, r6
 8003608:	d11a      	bne.n	8003640 <_printf_common+0xc8>
 800360a:	2000      	movs	r0, #0
 800360c:	e008      	b.n	8003620 <_printf_common+0xa8>
 800360e:	2301      	movs	r3, #1
 8003610:	4652      	mov	r2, sl
 8003612:	4649      	mov	r1, r9
 8003614:	4638      	mov	r0, r7
 8003616:	47c0      	blx	r8
 8003618:	3001      	adds	r0, #1
 800361a:	d103      	bne.n	8003624 <_printf_common+0xac>
 800361c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003624:	3501      	adds	r5, #1
 8003626:	e7c6      	b.n	80035b6 <_printf_common+0x3e>
 8003628:	18e1      	adds	r1, r4, r3
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	2030      	movs	r0, #48	; 0x30
 800362e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003632:	4422      	add	r2, r4
 8003634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800363c:	3302      	adds	r3, #2
 800363e:	e7c7      	b.n	80035d0 <_printf_common+0x58>
 8003640:	2301      	movs	r3, #1
 8003642:	4622      	mov	r2, r4
 8003644:	4649      	mov	r1, r9
 8003646:	4638      	mov	r0, r7
 8003648:	47c0      	blx	r8
 800364a:	3001      	adds	r0, #1
 800364c:	d0e6      	beq.n	800361c <_printf_common+0xa4>
 800364e:	3601      	adds	r6, #1
 8003650:	e7d9      	b.n	8003606 <_printf_common+0x8e>
	...

08003654 <_printf_i>:
 8003654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003658:	7e0f      	ldrb	r7, [r1, #24]
 800365a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800365c:	2f78      	cmp	r7, #120	; 0x78
 800365e:	4691      	mov	r9, r2
 8003660:	4680      	mov	r8, r0
 8003662:	460c      	mov	r4, r1
 8003664:	469a      	mov	sl, r3
 8003666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800366a:	d807      	bhi.n	800367c <_printf_i+0x28>
 800366c:	2f62      	cmp	r7, #98	; 0x62
 800366e:	d80a      	bhi.n	8003686 <_printf_i+0x32>
 8003670:	2f00      	cmp	r7, #0
 8003672:	f000 80d4 	beq.w	800381e <_printf_i+0x1ca>
 8003676:	2f58      	cmp	r7, #88	; 0x58
 8003678:	f000 80c0 	beq.w	80037fc <_printf_i+0x1a8>
 800367c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003684:	e03a      	b.n	80036fc <_printf_i+0xa8>
 8003686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800368a:	2b15      	cmp	r3, #21
 800368c:	d8f6      	bhi.n	800367c <_printf_i+0x28>
 800368e:	a101      	add	r1, pc, #4	; (adr r1, 8003694 <_printf_i+0x40>)
 8003690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003694:	080036ed 	.word	0x080036ed
 8003698:	08003701 	.word	0x08003701
 800369c:	0800367d 	.word	0x0800367d
 80036a0:	0800367d 	.word	0x0800367d
 80036a4:	0800367d 	.word	0x0800367d
 80036a8:	0800367d 	.word	0x0800367d
 80036ac:	08003701 	.word	0x08003701
 80036b0:	0800367d 	.word	0x0800367d
 80036b4:	0800367d 	.word	0x0800367d
 80036b8:	0800367d 	.word	0x0800367d
 80036bc:	0800367d 	.word	0x0800367d
 80036c0:	08003805 	.word	0x08003805
 80036c4:	0800372d 	.word	0x0800372d
 80036c8:	080037bf 	.word	0x080037bf
 80036cc:	0800367d 	.word	0x0800367d
 80036d0:	0800367d 	.word	0x0800367d
 80036d4:	08003827 	.word	0x08003827
 80036d8:	0800367d 	.word	0x0800367d
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	0800367d 	.word	0x0800367d
 80036e4:	0800367d 	.word	0x0800367d
 80036e8:	080037c7 	.word	0x080037c7
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	602a      	str	r2, [r5, #0]
 80036f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036fc:	2301      	movs	r3, #1
 80036fe:	e09f      	b.n	8003840 <_printf_i+0x1ec>
 8003700:	6820      	ldr	r0, [r4, #0]
 8003702:	682b      	ldr	r3, [r5, #0]
 8003704:	0607      	lsls	r7, r0, #24
 8003706:	f103 0104 	add.w	r1, r3, #4
 800370a:	6029      	str	r1, [r5, #0]
 800370c:	d501      	bpl.n	8003712 <_printf_i+0xbe>
 800370e:	681e      	ldr	r6, [r3, #0]
 8003710:	e003      	b.n	800371a <_printf_i+0xc6>
 8003712:	0646      	lsls	r6, r0, #25
 8003714:	d5fb      	bpl.n	800370e <_printf_i+0xba>
 8003716:	f9b3 6000 	ldrsh.w	r6, [r3]
 800371a:	2e00      	cmp	r6, #0
 800371c:	da03      	bge.n	8003726 <_printf_i+0xd2>
 800371e:	232d      	movs	r3, #45	; 0x2d
 8003720:	4276      	negs	r6, r6
 8003722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003726:	485a      	ldr	r0, [pc, #360]	; (8003890 <_printf_i+0x23c>)
 8003728:	230a      	movs	r3, #10
 800372a:	e012      	b.n	8003752 <_printf_i+0xfe>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	1d19      	adds	r1, r3, #4
 8003732:	6029      	str	r1, [r5, #0]
 8003734:	0605      	lsls	r5, r0, #24
 8003736:	d501      	bpl.n	800373c <_printf_i+0xe8>
 8003738:	681e      	ldr	r6, [r3, #0]
 800373a:	e002      	b.n	8003742 <_printf_i+0xee>
 800373c:	0641      	lsls	r1, r0, #25
 800373e:	d5fb      	bpl.n	8003738 <_printf_i+0xe4>
 8003740:	881e      	ldrh	r6, [r3, #0]
 8003742:	4853      	ldr	r0, [pc, #332]	; (8003890 <_printf_i+0x23c>)
 8003744:	2f6f      	cmp	r7, #111	; 0x6f
 8003746:	bf0c      	ite	eq
 8003748:	2308      	moveq	r3, #8
 800374a:	230a      	movne	r3, #10
 800374c:	2100      	movs	r1, #0
 800374e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003752:	6865      	ldr	r5, [r4, #4]
 8003754:	60a5      	str	r5, [r4, #8]
 8003756:	2d00      	cmp	r5, #0
 8003758:	bfa2      	ittt	ge
 800375a:	6821      	ldrge	r1, [r4, #0]
 800375c:	f021 0104 	bicge.w	r1, r1, #4
 8003760:	6021      	strge	r1, [r4, #0]
 8003762:	b90e      	cbnz	r6, 8003768 <_printf_i+0x114>
 8003764:	2d00      	cmp	r5, #0
 8003766:	d04b      	beq.n	8003800 <_printf_i+0x1ac>
 8003768:	4615      	mov	r5, r2
 800376a:	fbb6 f1f3 	udiv	r1, r6, r3
 800376e:	fb03 6711 	mls	r7, r3, r1, r6
 8003772:	5dc7      	ldrb	r7, [r0, r7]
 8003774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003778:	4637      	mov	r7, r6
 800377a:	42bb      	cmp	r3, r7
 800377c:	460e      	mov	r6, r1
 800377e:	d9f4      	bls.n	800376a <_printf_i+0x116>
 8003780:	2b08      	cmp	r3, #8
 8003782:	d10b      	bne.n	800379c <_printf_i+0x148>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	07de      	lsls	r6, r3, #31
 8003788:	d508      	bpl.n	800379c <_printf_i+0x148>
 800378a:	6923      	ldr	r3, [r4, #16]
 800378c:	6861      	ldr	r1, [r4, #4]
 800378e:	4299      	cmp	r1, r3
 8003790:	bfde      	ittt	le
 8003792:	2330      	movle	r3, #48	; 0x30
 8003794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003798:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800379c:	1b52      	subs	r2, r2, r5
 800379e:	6122      	str	r2, [r4, #16]
 80037a0:	f8cd a000 	str.w	sl, [sp]
 80037a4:	464b      	mov	r3, r9
 80037a6:	aa03      	add	r2, sp, #12
 80037a8:	4621      	mov	r1, r4
 80037aa:	4640      	mov	r0, r8
 80037ac:	f7ff fee4 	bl	8003578 <_printf_common>
 80037b0:	3001      	adds	r0, #1
 80037b2:	d14a      	bne.n	800384a <_printf_i+0x1f6>
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b8:	b004      	add	sp, #16
 80037ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	6023      	str	r3, [r4, #0]
 80037c6:	4833      	ldr	r0, [pc, #204]	; (8003894 <_printf_i+0x240>)
 80037c8:	2778      	movs	r7, #120	; 0x78
 80037ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	6829      	ldr	r1, [r5, #0]
 80037d2:	061f      	lsls	r7, r3, #24
 80037d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80037d8:	d402      	bmi.n	80037e0 <_printf_i+0x18c>
 80037da:	065f      	lsls	r7, r3, #25
 80037dc:	bf48      	it	mi
 80037de:	b2b6      	uxthmi	r6, r6
 80037e0:	07df      	lsls	r7, r3, #31
 80037e2:	bf48      	it	mi
 80037e4:	f043 0320 	orrmi.w	r3, r3, #32
 80037e8:	6029      	str	r1, [r5, #0]
 80037ea:	bf48      	it	mi
 80037ec:	6023      	strmi	r3, [r4, #0]
 80037ee:	b91e      	cbnz	r6, 80037f8 <_printf_i+0x1a4>
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	f023 0320 	bic.w	r3, r3, #32
 80037f6:	6023      	str	r3, [r4, #0]
 80037f8:	2310      	movs	r3, #16
 80037fa:	e7a7      	b.n	800374c <_printf_i+0xf8>
 80037fc:	4824      	ldr	r0, [pc, #144]	; (8003890 <_printf_i+0x23c>)
 80037fe:	e7e4      	b.n	80037ca <_printf_i+0x176>
 8003800:	4615      	mov	r5, r2
 8003802:	e7bd      	b.n	8003780 <_printf_i+0x12c>
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	6826      	ldr	r6, [r4, #0]
 8003808:	6961      	ldr	r1, [r4, #20]
 800380a:	1d18      	adds	r0, r3, #4
 800380c:	6028      	str	r0, [r5, #0]
 800380e:	0635      	lsls	r5, r6, #24
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	d501      	bpl.n	8003818 <_printf_i+0x1c4>
 8003814:	6019      	str	r1, [r3, #0]
 8003816:	e002      	b.n	800381e <_printf_i+0x1ca>
 8003818:	0670      	lsls	r0, r6, #25
 800381a:	d5fb      	bpl.n	8003814 <_printf_i+0x1c0>
 800381c:	8019      	strh	r1, [r3, #0]
 800381e:	2300      	movs	r3, #0
 8003820:	6123      	str	r3, [r4, #16]
 8003822:	4615      	mov	r5, r2
 8003824:	e7bc      	b.n	80037a0 <_printf_i+0x14c>
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	1d1a      	adds	r2, r3, #4
 800382a:	602a      	str	r2, [r5, #0]
 800382c:	681d      	ldr	r5, [r3, #0]
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	2100      	movs	r1, #0
 8003832:	4628      	mov	r0, r5
 8003834:	f7fc fccc 	bl	80001d0 <memchr>
 8003838:	b108      	cbz	r0, 800383e <_printf_i+0x1ea>
 800383a:	1b40      	subs	r0, r0, r5
 800383c:	6060      	str	r0, [r4, #4]
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	2300      	movs	r3, #0
 8003844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003848:	e7aa      	b.n	80037a0 <_printf_i+0x14c>
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	462a      	mov	r2, r5
 800384e:	4649      	mov	r1, r9
 8003850:	4640      	mov	r0, r8
 8003852:	47d0      	blx	sl
 8003854:	3001      	adds	r0, #1
 8003856:	d0ad      	beq.n	80037b4 <_printf_i+0x160>
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	079b      	lsls	r3, r3, #30
 800385c:	d413      	bmi.n	8003886 <_printf_i+0x232>
 800385e:	68e0      	ldr	r0, [r4, #12]
 8003860:	9b03      	ldr	r3, [sp, #12]
 8003862:	4298      	cmp	r0, r3
 8003864:	bfb8      	it	lt
 8003866:	4618      	movlt	r0, r3
 8003868:	e7a6      	b.n	80037b8 <_printf_i+0x164>
 800386a:	2301      	movs	r3, #1
 800386c:	4632      	mov	r2, r6
 800386e:	4649      	mov	r1, r9
 8003870:	4640      	mov	r0, r8
 8003872:	47d0      	blx	sl
 8003874:	3001      	adds	r0, #1
 8003876:	d09d      	beq.n	80037b4 <_printf_i+0x160>
 8003878:	3501      	adds	r5, #1
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	9903      	ldr	r1, [sp, #12]
 800387e:	1a5b      	subs	r3, r3, r1
 8003880:	42ab      	cmp	r3, r5
 8003882:	dcf2      	bgt.n	800386a <_printf_i+0x216>
 8003884:	e7eb      	b.n	800385e <_printf_i+0x20a>
 8003886:	2500      	movs	r5, #0
 8003888:	f104 0619 	add.w	r6, r4, #25
 800388c:	e7f5      	b.n	800387a <_printf_i+0x226>
 800388e:	bf00      	nop
 8003890:	08005982 	.word	0x08005982
 8003894:	08005993 	.word	0x08005993

08003898 <std>:
 8003898:	2300      	movs	r3, #0
 800389a:	b510      	push	{r4, lr}
 800389c:	4604      	mov	r4, r0
 800389e:	e9c0 3300 	strd	r3, r3, [r0]
 80038a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038a6:	6083      	str	r3, [r0, #8]
 80038a8:	8181      	strh	r1, [r0, #12]
 80038aa:	6643      	str	r3, [r0, #100]	; 0x64
 80038ac:	81c2      	strh	r2, [r0, #14]
 80038ae:	6183      	str	r3, [r0, #24]
 80038b0:	4619      	mov	r1, r3
 80038b2:	2208      	movs	r2, #8
 80038b4:	305c      	adds	r0, #92	; 0x5c
 80038b6:	f000 f8f4 	bl	8003aa2 <memset>
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <std+0x58>)
 80038bc:	6263      	str	r3, [r4, #36]	; 0x24
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <std+0x5c>)
 80038c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80038c2:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <std+0x60>)
 80038c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <std+0x64>)
 80038c8:	6323      	str	r3, [r4, #48]	; 0x30
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <std+0x68>)
 80038cc:	6224      	str	r4, [r4, #32]
 80038ce:	429c      	cmp	r4, r3
 80038d0:	d006      	beq.n	80038e0 <std+0x48>
 80038d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80038d6:	4294      	cmp	r4, r2
 80038d8:	d002      	beq.n	80038e0 <std+0x48>
 80038da:	33d0      	adds	r3, #208	; 0xd0
 80038dc:	429c      	cmp	r4, r3
 80038de:	d105      	bne.n	80038ec <std+0x54>
 80038e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038e8:	f000 b958 	b.w	8003b9c <__retarget_lock_init_recursive>
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	bf00      	nop
 80038f0:	08003a1d 	.word	0x08003a1d
 80038f4:	08003a3f 	.word	0x08003a3f
 80038f8:	08003a77 	.word	0x08003a77
 80038fc:	08003a9b 	.word	0x08003a9b
 8003900:	20000240 	.word	0x20000240

08003904 <stdio_exit_handler>:
 8003904:	4a02      	ldr	r2, [pc, #8]	; (8003910 <stdio_exit_handler+0xc>)
 8003906:	4903      	ldr	r1, [pc, #12]	; (8003914 <stdio_exit_handler+0x10>)
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <stdio_exit_handler+0x14>)
 800390a:	f000 b869 	b.w	80039e0 <_fwalk_sglue>
 800390e:	bf00      	nop
 8003910:	2000000c 	.word	0x2000000c
 8003914:	080052a1 	.word	0x080052a1
 8003918:	20000018 	.word	0x20000018

0800391c <cleanup_stdio>:
 800391c:	6841      	ldr	r1, [r0, #4]
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <cleanup_stdio+0x34>)
 8003920:	4299      	cmp	r1, r3
 8003922:	b510      	push	{r4, lr}
 8003924:	4604      	mov	r4, r0
 8003926:	d001      	beq.n	800392c <cleanup_stdio+0x10>
 8003928:	f001 fcba 	bl	80052a0 <_fflush_r>
 800392c:	68a1      	ldr	r1, [r4, #8]
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <cleanup_stdio+0x38>)
 8003930:	4299      	cmp	r1, r3
 8003932:	d002      	beq.n	800393a <cleanup_stdio+0x1e>
 8003934:	4620      	mov	r0, r4
 8003936:	f001 fcb3 	bl	80052a0 <_fflush_r>
 800393a:	68e1      	ldr	r1, [r4, #12]
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <cleanup_stdio+0x3c>)
 800393e:	4299      	cmp	r1, r3
 8003940:	d004      	beq.n	800394c <cleanup_stdio+0x30>
 8003942:	4620      	mov	r0, r4
 8003944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003948:	f001 bcaa 	b.w	80052a0 <_fflush_r>
 800394c:	bd10      	pop	{r4, pc}
 800394e:	bf00      	nop
 8003950:	20000240 	.word	0x20000240
 8003954:	200002a8 	.word	0x200002a8
 8003958:	20000310 	.word	0x20000310

0800395c <global_stdio_init.part.0>:
 800395c:	b510      	push	{r4, lr}
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <global_stdio_init.part.0+0x30>)
 8003960:	4c0b      	ldr	r4, [pc, #44]	; (8003990 <global_stdio_init.part.0+0x34>)
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <global_stdio_init.part.0+0x38>)
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4620      	mov	r0, r4
 8003968:	2200      	movs	r2, #0
 800396a:	2104      	movs	r1, #4
 800396c:	f7ff ff94 	bl	8003898 <std>
 8003970:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003974:	2201      	movs	r2, #1
 8003976:	2109      	movs	r1, #9
 8003978:	f7ff ff8e 	bl	8003898 <std>
 800397c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003980:	2202      	movs	r2, #2
 8003982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003986:	2112      	movs	r1, #18
 8003988:	f7ff bf86 	b.w	8003898 <std>
 800398c:	20000378 	.word	0x20000378
 8003990:	20000240 	.word	0x20000240
 8003994:	08003905 	.word	0x08003905

08003998 <__sfp_lock_acquire>:
 8003998:	4801      	ldr	r0, [pc, #4]	; (80039a0 <__sfp_lock_acquire+0x8>)
 800399a:	f000 b900 	b.w	8003b9e <__retarget_lock_acquire_recursive>
 800399e:	bf00      	nop
 80039a0:	20000381 	.word	0x20000381

080039a4 <__sfp_lock_release>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__sfp_lock_release+0x8>)
 80039a6:	f000 b8fb 	b.w	8003ba0 <__retarget_lock_release_recursive>
 80039aa:	bf00      	nop
 80039ac:	20000381 	.word	0x20000381

080039b0 <__sinit>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	f7ff fff0 	bl	8003998 <__sfp_lock_acquire>
 80039b8:	6a23      	ldr	r3, [r4, #32]
 80039ba:	b11b      	cbz	r3, 80039c4 <__sinit+0x14>
 80039bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c0:	f7ff bff0 	b.w	80039a4 <__sfp_lock_release>
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <__sinit+0x28>)
 80039c6:	6223      	str	r3, [r4, #32]
 80039c8:	4b04      	ldr	r3, [pc, #16]	; (80039dc <__sinit+0x2c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f5      	bne.n	80039bc <__sinit+0xc>
 80039d0:	f7ff ffc4 	bl	800395c <global_stdio_init.part.0>
 80039d4:	e7f2      	b.n	80039bc <__sinit+0xc>
 80039d6:	bf00      	nop
 80039d8:	0800391d 	.word	0x0800391d
 80039dc:	20000378 	.word	0x20000378

080039e0 <_fwalk_sglue>:
 80039e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e4:	4607      	mov	r7, r0
 80039e6:	4688      	mov	r8, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	2600      	movs	r6, #0
 80039ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039f0:	f1b9 0901 	subs.w	r9, r9, #1
 80039f4:	d505      	bpl.n	8003a02 <_fwalk_sglue+0x22>
 80039f6:	6824      	ldr	r4, [r4, #0]
 80039f8:	2c00      	cmp	r4, #0
 80039fa:	d1f7      	bne.n	80039ec <_fwalk_sglue+0xc>
 80039fc:	4630      	mov	r0, r6
 80039fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a02:	89ab      	ldrh	r3, [r5, #12]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d907      	bls.n	8003a18 <_fwalk_sglue+0x38>
 8003a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	d003      	beq.n	8003a18 <_fwalk_sglue+0x38>
 8003a10:	4629      	mov	r1, r5
 8003a12:	4638      	mov	r0, r7
 8003a14:	47c0      	blx	r8
 8003a16:	4306      	orrs	r6, r0
 8003a18:	3568      	adds	r5, #104	; 0x68
 8003a1a:	e7e9      	b.n	80039f0 <_fwalk_sglue+0x10>

08003a1c <__sread>:
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	460c      	mov	r4, r1
 8003a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a24:	f000 f86c 	bl	8003b00 <_read_r>
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	bfab      	itete	ge
 8003a2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003a30:	181b      	addge	r3, r3, r0
 8003a32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a36:	bfac      	ite	ge
 8003a38:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a3a:	81a3      	strhlt	r3, [r4, #12]
 8003a3c:	bd10      	pop	{r4, pc}

08003a3e <__swrite>:
 8003a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a42:	461f      	mov	r7, r3
 8003a44:	898b      	ldrh	r3, [r1, #12]
 8003a46:	05db      	lsls	r3, r3, #23
 8003a48:	4605      	mov	r5, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	4616      	mov	r6, r2
 8003a4e:	d505      	bpl.n	8003a5c <__swrite+0x1e>
 8003a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a54:	2302      	movs	r3, #2
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f840 	bl	8003adc <_lseek_r>
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a66:	81a3      	strh	r3, [r4, #12]
 8003a68:	4632      	mov	r2, r6
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a72:	f000 b857 	b.w	8003b24 <_write_r>

08003a76 <__sseek>:
 8003a76:	b510      	push	{r4, lr}
 8003a78:	460c      	mov	r4, r1
 8003a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a7e:	f000 f82d 	bl	8003adc <_lseek_r>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	89a3      	ldrh	r3, [r4, #12]
 8003a86:	bf15      	itete	ne
 8003a88:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a92:	81a3      	strheq	r3, [r4, #12]
 8003a94:	bf18      	it	ne
 8003a96:	81a3      	strhne	r3, [r4, #12]
 8003a98:	bd10      	pop	{r4, pc}

08003a9a <__sclose>:
 8003a9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a9e:	f000 b80d 	b.w	8003abc <_close_r>

08003aa2 <memset>:
 8003aa2:	4402      	add	r2, r0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d100      	bne.n	8003aac <memset+0xa>
 8003aaa:	4770      	bx	lr
 8003aac:	f803 1b01 	strb.w	r1, [r3], #1
 8003ab0:	e7f9      	b.n	8003aa6 <memset+0x4>
	...

08003ab4 <_localeconv_r>:
 8003ab4:	4800      	ldr	r0, [pc, #0]	; (8003ab8 <_localeconv_r+0x4>)
 8003ab6:	4770      	bx	lr
 8003ab8:	20000158 	.word	0x20000158

08003abc <_close_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_close_r+0x1c>)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	602b      	str	r3, [r5, #0]
 8003ac8:	f7fd fc75 	bl	80013b6 <_close>
 8003acc:	1c43      	adds	r3, r0, #1
 8003ace:	d102      	bne.n	8003ad6 <_close_r+0x1a>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	b103      	cbz	r3, 8003ad6 <_close_r+0x1a>
 8003ad4:	6023      	str	r3, [r4, #0]
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
 8003ad8:	2000037c 	.word	0x2000037c

08003adc <_lseek_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	; (8003afc <_lseek_r+0x20>)
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	4608      	mov	r0, r1
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	602a      	str	r2, [r5, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f7fd fc8a 	bl	8001404 <_lseek>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d102      	bne.n	8003afa <_lseek_r+0x1e>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	b103      	cbz	r3, 8003afa <_lseek_r+0x1e>
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	bd38      	pop	{r3, r4, r5, pc}
 8003afc:	2000037c 	.word	0x2000037c

08003b00 <_read_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d07      	ldr	r5, [pc, #28]	; (8003b20 <_read_r+0x20>)
 8003b04:	4604      	mov	r4, r0
 8003b06:	4608      	mov	r0, r1
 8003b08:	4611      	mov	r1, r2
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	602a      	str	r2, [r5, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	f7fd fc18 	bl	8001344 <_read>
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	d102      	bne.n	8003b1e <_read_r+0x1e>
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	b103      	cbz	r3, 8003b1e <_read_r+0x1e>
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	2000037c 	.word	0x2000037c

08003b24 <_write_r>:
 8003b24:	b538      	push	{r3, r4, r5, lr}
 8003b26:	4d07      	ldr	r5, [pc, #28]	; (8003b44 <_write_r+0x20>)
 8003b28:	4604      	mov	r4, r0
 8003b2a:	4608      	mov	r0, r1
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	2200      	movs	r2, #0
 8003b30:	602a      	str	r2, [r5, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7fd fc23 	bl	800137e <_write>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d102      	bne.n	8003b42 <_write_r+0x1e>
 8003b3c:	682b      	ldr	r3, [r5, #0]
 8003b3e:	b103      	cbz	r3, 8003b42 <_write_r+0x1e>
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	bd38      	pop	{r3, r4, r5, pc}
 8003b44:	2000037c 	.word	0x2000037c

08003b48 <__errno>:
 8003b48:	4b01      	ldr	r3, [pc, #4]	; (8003b50 <__errno+0x8>)
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000064 	.word	0x20000064

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	4d0d      	ldr	r5, [pc, #52]	; (8003b8c <__libc_init_array+0x38>)
 8003b58:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <__libc_init_array+0x3c>)
 8003b5a:	1b64      	subs	r4, r4, r5
 8003b5c:	10a4      	asrs	r4, r4, #2
 8003b5e:	2600      	movs	r6, #0
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <__libc_init_array+0x40>)
 8003b66:	4c0c      	ldr	r4, [pc, #48]	; (8003b98 <__libc_init_array+0x44>)
 8003b68:	f001 feee 	bl	8005948 <_init>
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	2600      	movs	r6, #0
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08005cec 	.word	0x08005cec
 8003b90:	08005cec 	.word	0x08005cec
 8003b94:	08005cec 	.word	0x08005cec
 8003b98:	08005cf0 	.word	0x08005cf0

08003b9c <__retarget_lock_init_recursive>:
 8003b9c:	4770      	bx	lr

08003b9e <__retarget_lock_acquire_recursive>:
 8003b9e:	4770      	bx	lr

08003ba0 <__retarget_lock_release_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <quorem>:
 8003ba2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba6:	6903      	ldr	r3, [r0, #16]
 8003ba8:	690c      	ldr	r4, [r1, #16]
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	4607      	mov	r7, r0
 8003bae:	db7e      	blt.n	8003cae <quorem+0x10c>
 8003bb0:	3c01      	subs	r4, #1
 8003bb2:	f101 0814 	add.w	r8, r1, #20
 8003bb6:	f100 0514 	add.w	r5, r0, #20
 8003bba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bbe:	9301      	str	r3, [sp, #4]
 8003bc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003bc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003bd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8003bd8:	d331      	bcc.n	8003c3e <quorem+0x9c>
 8003bda:	f04f 0e00 	mov.w	lr, #0
 8003bde:	4640      	mov	r0, r8
 8003be0:	46ac      	mov	ip, r5
 8003be2:	46f2      	mov	sl, lr
 8003be4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003be8:	b293      	uxth	r3, r2
 8003bea:	fb06 e303 	mla	r3, r6, r3, lr
 8003bee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bf2:	0c1a      	lsrs	r2, r3, #16
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	ebaa 0303 	sub.w	r3, sl, r3
 8003bfa:	f8dc a000 	ldr.w	sl, [ip]
 8003bfe:	fa13 f38a 	uxtah	r3, r3, sl
 8003c02:	fb06 220e 	mla	r2, r6, lr, r2
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	9b00      	ldr	r3, [sp, #0]
 8003c0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003c0e:	b292      	uxth	r2, r2
 8003c10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c18:	f8bd 3000 	ldrh.w	r3, [sp]
 8003c1c:	4581      	cmp	r9, r0
 8003c1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c22:	f84c 3b04 	str.w	r3, [ip], #4
 8003c26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003c2a:	d2db      	bcs.n	8003be4 <quorem+0x42>
 8003c2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003c30:	b92b      	cbnz	r3, 8003c3e <quorem+0x9c>
 8003c32:	9b01      	ldr	r3, [sp, #4]
 8003c34:	3b04      	subs	r3, #4
 8003c36:	429d      	cmp	r5, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	d32c      	bcc.n	8003c96 <quorem+0xf4>
 8003c3c:	613c      	str	r4, [r7, #16]
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f001 f9a8 	bl	8004f94 <__mcmp>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	db22      	blt.n	8003c8e <quorem+0xec>
 8003c48:	3601      	adds	r6, #1
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003c52:	f8d1 c000 	ldr.w	ip, [r1]
 8003c56:	b293      	uxth	r3, r2
 8003c58:	1ac3      	subs	r3, r0, r3
 8003c5a:	0c12      	lsrs	r2, r2, #16
 8003c5c:	fa13 f38c 	uxtah	r3, r3, ip
 8003c60:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003c64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c6e:	45c1      	cmp	r9, r8
 8003c70:	f841 3b04 	str.w	r3, [r1], #4
 8003c74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003c78:	d2e9      	bcs.n	8003c4e <quorem+0xac>
 8003c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c82:	b922      	cbnz	r2, 8003c8e <quorem+0xec>
 8003c84:	3b04      	subs	r3, #4
 8003c86:	429d      	cmp	r5, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	d30a      	bcc.n	8003ca2 <quorem+0x100>
 8003c8c:	613c      	str	r4, [r7, #16]
 8003c8e:	4630      	mov	r0, r6
 8003c90:	b003      	add	sp, #12
 8003c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	3b04      	subs	r3, #4
 8003c9a:	2a00      	cmp	r2, #0
 8003c9c:	d1ce      	bne.n	8003c3c <quorem+0x9a>
 8003c9e:	3c01      	subs	r4, #1
 8003ca0:	e7c9      	b.n	8003c36 <quorem+0x94>
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	3b04      	subs	r3, #4
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d1f0      	bne.n	8003c8c <quorem+0xea>
 8003caa:	3c01      	subs	r4, #1
 8003cac:	e7eb      	b.n	8003c86 <quorem+0xe4>
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e7ee      	b.n	8003c90 <quorem+0xee>
 8003cb2:	0000      	movs	r0, r0
 8003cb4:	0000      	movs	r0, r0
	...

08003cb8 <_dtoa_r>:
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	ed2d 8b04 	vpush	{d8-d9}
 8003cc0:	69c5      	ldr	r5, [r0, #28]
 8003cc2:	b093      	sub	sp, #76	; 0x4c
 8003cc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003cc8:	ec57 6b10 	vmov	r6, r7, d0
 8003ccc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003cd0:	9107      	str	r1, [sp, #28]
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8003cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8003cd8:	b975      	cbnz	r5, 8003cf8 <_dtoa_r+0x40>
 8003cda:	2010      	movs	r0, #16
 8003cdc:	f000 fe2a 	bl	8004934 <malloc>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	61e0      	str	r0, [r4, #28]
 8003ce4:	b920      	cbnz	r0, 8003cf0 <_dtoa_r+0x38>
 8003ce6:	4bae      	ldr	r3, [pc, #696]	; (8003fa0 <_dtoa_r+0x2e8>)
 8003ce8:	21ef      	movs	r1, #239	; 0xef
 8003cea:	48ae      	ldr	r0, [pc, #696]	; (8003fa4 <_dtoa_r+0x2ec>)
 8003cec:	f001 fb1e 	bl	800532c <__assert_func>
 8003cf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003cf4:	6005      	str	r5, [r0, #0]
 8003cf6:	60c5      	str	r5, [r0, #12]
 8003cf8:	69e3      	ldr	r3, [r4, #28]
 8003cfa:	6819      	ldr	r1, [r3, #0]
 8003cfc:	b151      	cbz	r1, 8003d14 <_dtoa_r+0x5c>
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	604a      	str	r2, [r1, #4]
 8003d02:	2301      	movs	r3, #1
 8003d04:	4093      	lsls	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f000 ff07 	bl	8004b1c <_Bfree>
 8003d0e:	69e3      	ldr	r3, [r4, #28]
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	1e3b      	subs	r3, r7, #0
 8003d16:	bfbb      	ittet	lt
 8003d18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d1c:	9303      	strlt	r3, [sp, #12]
 8003d1e:	2300      	movge	r3, #0
 8003d20:	2201      	movlt	r2, #1
 8003d22:	bfac      	ite	ge
 8003d24:	f8c8 3000 	strge.w	r3, [r8]
 8003d28:	f8c8 2000 	strlt.w	r2, [r8]
 8003d2c:	4b9e      	ldr	r3, [pc, #632]	; (8003fa8 <_dtoa_r+0x2f0>)
 8003d2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003d32:	ea33 0308 	bics.w	r3, r3, r8
 8003d36:	d11b      	bne.n	8003d70 <_dtoa_r+0xb8>
 8003d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003d44:	4333      	orrs	r3, r6
 8003d46:	f000 8593 	beq.w	8004870 <_dtoa_r+0xbb8>
 8003d4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d4c:	b963      	cbnz	r3, 8003d68 <_dtoa_r+0xb0>
 8003d4e:	4b97      	ldr	r3, [pc, #604]	; (8003fac <_dtoa_r+0x2f4>)
 8003d50:	e027      	b.n	8003da2 <_dtoa_r+0xea>
 8003d52:	4b97      	ldr	r3, [pc, #604]	; (8003fb0 <_dtoa_r+0x2f8>)
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	3308      	adds	r3, #8
 8003d58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	9800      	ldr	r0, [sp, #0]
 8003d5e:	b013      	add	sp, #76	; 0x4c
 8003d60:	ecbd 8b04 	vpop	{d8-d9}
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	4b90      	ldr	r3, [pc, #576]	; (8003fac <_dtoa_r+0x2f4>)
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	3303      	adds	r3, #3
 8003d6e:	e7f3      	b.n	8003d58 <_dtoa_r+0xa0>
 8003d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	ec51 0b17 	vmov	r0, r1, d7
 8003d7a:	eeb0 8a47 	vmov.f32	s16, s14
 8003d7e:	eef0 8a67 	vmov.f32	s17, s15
 8003d82:	2300      	movs	r3, #0
 8003d84:	f7fc fea0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d88:	4681      	mov	r9, r0
 8003d8a:	b160      	cbz	r0, 8003da6 <_dtoa_r+0xee>
 8003d8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8568 	beq.w	800486a <_dtoa_r+0xbb2>
 8003d9a:	4b86      	ldr	r3, [pc, #536]	; (8003fb4 <_dtoa_r+0x2fc>)
 8003d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	3b01      	subs	r3, #1
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	e7da      	b.n	8003d5c <_dtoa_r+0xa4>
 8003da6:	aa10      	add	r2, sp, #64	; 0x40
 8003da8:	a911      	add	r1, sp, #68	; 0x44
 8003daa:	4620      	mov	r0, r4
 8003dac:	eeb0 0a48 	vmov.f32	s0, s16
 8003db0:	eef0 0a68 	vmov.f32	s1, s17
 8003db4:	f001 f994 	bl	80050e0 <__d2b>
 8003db8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003dbc:	4682      	mov	sl, r0
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	d07f      	beq.n	8003ec2 <_dtoa_r+0x20a>
 8003dc2:	ee18 3a90 	vmov	r3, s17
 8003dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003dce:	ec51 0b18 	vmov	r0, r1, d8
 8003dd2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003dda:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003dde:	4619      	mov	r1, r3
 8003de0:	2200      	movs	r2, #0
 8003de2:	4b75      	ldr	r3, [pc, #468]	; (8003fb8 <_dtoa_r+0x300>)
 8003de4:	f7fc fa50 	bl	8000288 <__aeabi_dsub>
 8003de8:	a367      	add	r3, pc, #412	; (adr r3, 8003f88 <_dtoa_r+0x2d0>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fc03 	bl	80005f8 <__aeabi_dmul>
 8003df2:	a367      	add	r3, pc, #412	; (adr r3, 8003f90 <_dtoa_r+0x2d8>)
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f7fc fa48 	bl	800028c <__adddf3>
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	4628      	mov	r0, r5
 8003e00:	460f      	mov	r7, r1
 8003e02:	f7fc fb8f 	bl	8000524 <__aeabi_i2d>
 8003e06:	a364      	add	r3, pc, #400	; (adr r3, 8003f98 <_dtoa_r+0x2e0>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc fbf4 	bl	80005f8 <__aeabi_dmul>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4630      	mov	r0, r6
 8003e16:	4639      	mov	r1, r7
 8003e18:	f7fc fa38 	bl	800028c <__adddf3>
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460f      	mov	r7, r1
 8003e20:	f7fc fe9a 	bl	8000b58 <__aeabi_d2iz>
 8003e24:	2200      	movs	r2, #0
 8003e26:	4683      	mov	fp, r0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4630      	mov	r0, r6
 8003e2c:	4639      	mov	r1, r7
 8003e2e:	f7fc fe55 	bl	8000adc <__aeabi_dcmplt>
 8003e32:	b148      	cbz	r0, 8003e48 <_dtoa_r+0x190>
 8003e34:	4658      	mov	r0, fp
 8003e36:	f7fc fb75 	bl	8000524 <__aeabi_i2d>
 8003e3a:	4632      	mov	r2, r6
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	f7fc fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e42:	b908      	cbnz	r0, 8003e48 <_dtoa_r+0x190>
 8003e44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e48:	f1bb 0f16 	cmp.w	fp, #22
 8003e4c:	d857      	bhi.n	8003efe <_dtoa_r+0x246>
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <_dtoa_r+0x304>)
 8003e50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	ec51 0b18 	vmov	r0, r1, d8
 8003e5c:	f7fc fe3e 	bl	8000adc <__aeabi_dcmplt>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d04e      	beq.n	8003f02 <_dtoa_r+0x24a>
 8003e64:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003e68:	2300      	movs	r3, #0
 8003e6a:	930c      	str	r3, [sp, #48]	; 0x30
 8003e6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e6e:	1b5b      	subs	r3, r3, r5
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	bf45      	ittet	mi
 8003e74:	f1c3 0301 	rsbmi	r3, r3, #1
 8003e78:	9305      	strmi	r3, [sp, #20]
 8003e7a:	2300      	movpl	r3, #0
 8003e7c:	2300      	movmi	r3, #0
 8003e7e:	9206      	str	r2, [sp, #24]
 8003e80:	bf54      	ite	pl
 8003e82:	9305      	strpl	r3, [sp, #20]
 8003e84:	9306      	strmi	r3, [sp, #24]
 8003e86:	f1bb 0f00 	cmp.w	fp, #0
 8003e8a:	db3c      	blt.n	8003f06 <_dtoa_r+0x24e>
 8003e8c:	9b06      	ldr	r3, [sp, #24]
 8003e8e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003e92:	445b      	add	r3, fp
 8003e94:	9306      	str	r3, [sp, #24]
 8003e96:	2300      	movs	r3, #0
 8003e98:	9308      	str	r3, [sp, #32]
 8003e9a:	9b07      	ldr	r3, [sp, #28]
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	d868      	bhi.n	8003f72 <_dtoa_r+0x2ba>
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	bfc4      	itt	gt
 8003ea4:	3b04      	subgt	r3, #4
 8003ea6:	9307      	strgt	r3, [sp, #28]
 8003ea8:	9b07      	ldr	r3, [sp, #28]
 8003eaa:	f1a3 0302 	sub.w	r3, r3, #2
 8003eae:	bfcc      	ite	gt
 8003eb0:	2500      	movgt	r5, #0
 8003eb2:	2501      	movle	r5, #1
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	f200 8085 	bhi.w	8003fc4 <_dtoa_r+0x30c>
 8003eba:	e8df f003 	tbb	[pc, r3]
 8003ebe:	3b2e      	.short	0x3b2e
 8003ec0:	5839      	.short	0x5839
 8003ec2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003ec6:	441d      	add	r5, r3
 8003ec8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	bfc1      	itttt	gt
 8003ed0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ed4:	fa08 f803 	lslgt.w	r8, r8, r3
 8003ed8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003edc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003ee0:	bfd6      	itet	le
 8003ee2:	f1c3 0320 	rsble	r3, r3, #32
 8003ee6:	ea48 0003 	orrgt.w	r0, r8, r3
 8003eea:	fa06 f003 	lslle.w	r0, r6, r3
 8003eee:	f7fc fb09 	bl	8000504 <__aeabi_ui2d>
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003ef8:	3d01      	subs	r5, #1
 8003efa:	920e      	str	r2, [sp, #56]	; 0x38
 8003efc:	e76f      	b.n	8003dde <_dtoa_r+0x126>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e7b3      	b.n	8003e6a <_dtoa_r+0x1b2>
 8003f02:	900c      	str	r0, [sp, #48]	; 0x30
 8003f04:	e7b2      	b.n	8003e6c <_dtoa_r+0x1b4>
 8003f06:	9b05      	ldr	r3, [sp, #20]
 8003f08:	eba3 030b 	sub.w	r3, r3, fp
 8003f0c:	9305      	str	r3, [sp, #20]
 8003f0e:	f1cb 0300 	rsb	r3, fp, #0
 8003f12:	9308      	str	r3, [sp, #32]
 8003f14:	2300      	movs	r3, #0
 8003f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f18:	e7bf      	b.n	8003e9a <_dtoa_r+0x1e2>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	dc52      	bgt.n	8003fca <_dtoa_r+0x312>
 8003f24:	2301      	movs	r3, #1
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	920a      	str	r2, [sp, #40]	; 0x28
 8003f2e:	e00b      	b.n	8003f48 <_dtoa_r+0x290>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e7f3      	b.n	8003f1c <_dtoa_r+0x264>
 8003f34:	2300      	movs	r3, #0
 8003f36:	9309      	str	r3, [sp, #36]	; 0x24
 8003f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f3a:	445b      	add	r3, fp
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	bfb8      	it	lt
 8003f46:	2301      	movlt	r3, #1
 8003f48:	69e0      	ldr	r0, [r4, #28]
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	f102 0614 	add.w	r6, r2, #20
 8003f52:	429e      	cmp	r6, r3
 8003f54:	d93d      	bls.n	8003fd2 <_dtoa_r+0x31a>
 8003f56:	6041      	str	r1, [r0, #4]
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 fd9f 	bl	8004a9c <_Balloc>
 8003f5e:	9000      	str	r0, [sp, #0]
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d139      	bne.n	8003fd8 <_dtoa_r+0x320>
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <_dtoa_r+0x308>)
 8003f66:	4602      	mov	r2, r0
 8003f68:	f240 11af 	movw	r1, #431	; 0x1af
 8003f6c:	e6bd      	b.n	8003cea <_dtoa_r+0x32>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e7e1      	b.n	8003f36 <_dtoa_r+0x27e>
 8003f72:	2501      	movs	r5, #1
 8003f74:	2300      	movs	r3, #0
 8003f76:	9307      	str	r3, [sp, #28]
 8003f78:	9509      	str	r5, [sp, #36]	; 0x24
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	2200      	movs	r2, #0
 8003f84:	2312      	movs	r3, #18
 8003f86:	e7d1      	b.n	8003f2c <_dtoa_r+0x274>
 8003f88:	636f4361 	.word	0x636f4361
 8003f8c:	3fd287a7 	.word	0x3fd287a7
 8003f90:	8b60c8b3 	.word	0x8b60c8b3
 8003f94:	3fc68a28 	.word	0x3fc68a28
 8003f98:	509f79fb 	.word	0x509f79fb
 8003f9c:	3fd34413 	.word	0x3fd34413
 8003fa0:	080059b1 	.word	0x080059b1
 8003fa4:	080059c8 	.word	0x080059c8
 8003fa8:	7ff00000 	.word	0x7ff00000
 8003fac:	080059ad 	.word	0x080059ad
 8003fb0:	080059a4 	.word	0x080059a4
 8003fb4:	08005981 	.word	0x08005981
 8003fb8:	3ff80000 	.word	0x3ff80000
 8003fbc:	08005ab8 	.word	0x08005ab8
 8003fc0:	08005a20 	.word	0x08005a20
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	e7d7      	b.n	8003f7a <_dtoa_r+0x2c2>
 8003fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	e7ba      	b.n	8003f48 <_dtoa_r+0x290>
 8003fd2:	3101      	adds	r1, #1
 8003fd4:	0052      	lsls	r2, r2, #1
 8003fd6:	e7ba      	b.n	8003f4e <_dtoa_r+0x296>
 8003fd8:	69e3      	ldr	r3, [r4, #28]
 8003fda:	9a00      	ldr	r2, [sp, #0]
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	9b04      	ldr	r3, [sp, #16]
 8003fe0:	2b0e      	cmp	r3, #14
 8003fe2:	f200 80a8 	bhi.w	8004136 <_dtoa_r+0x47e>
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	f000 80a5 	beq.w	8004136 <_dtoa_r+0x47e>
 8003fec:	f1bb 0f00 	cmp.w	fp, #0
 8003ff0:	dd38      	ble.n	8004064 <_dtoa_r+0x3ac>
 8003ff2:	4bc0      	ldr	r3, [pc, #768]	; (80042f4 <_dtoa_r+0x63c>)
 8003ff4:	f00b 020f 	and.w	r2, fp, #15
 8003ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ffc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004000:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004004:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004008:	d019      	beq.n	800403e <_dtoa_r+0x386>
 800400a:	4bbb      	ldr	r3, [pc, #748]	; (80042f8 <_dtoa_r+0x640>)
 800400c:	ec51 0b18 	vmov	r0, r1, d8
 8004010:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004014:	f7fc fc1a 	bl	800084c <__aeabi_ddiv>
 8004018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800401c:	f008 080f 	and.w	r8, r8, #15
 8004020:	2503      	movs	r5, #3
 8004022:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80042f8 <_dtoa_r+0x640>
 8004026:	f1b8 0f00 	cmp.w	r8, #0
 800402a:	d10a      	bne.n	8004042 <_dtoa_r+0x38a>
 800402c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004030:	4632      	mov	r2, r6
 8004032:	463b      	mov	r3, r7
 8004034:	f7fc fc0a 	bl	800084c <__aeabi_ddiv>
 8004038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800403c:	e02b      	b.n	8004096 <_dtoa_r+0x3de>
 800403e:	2502      	movs	r5, #2
 8004040:	e7ef      	b.n	8004022 <_dtoa_r+0x36a>
 8004042:	f018 0f01 	tst.w	r8, #1
 8004046:	d008      	beq.n	800405a <_dtoa_r+0x3a2>
 8004048:	4630      	mov	r0, r6
 800404a:	4639      	mov	r1, r7
 800404c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004050:	f7fc fad2 	bl	80005f8 <__aeabi_dmul>
 8004054:	3501      	adds	r5, #1
 8004056:	4606      	mov	r6, r0
 8004058:	460f      	mov	r7, r1
 800405a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800405e:	f109 0908 	add.w	r9, r9, #8
 8004062:	e7e0      	b.n	8004026 <_dtoa_r+0x36e>
 8004064:	f000 809f 	beq.w	80041a6 <_dtoa_r+0x4ee>
 8004068:	f1cb 0600 	rsb	r6, fp, #0
 800406c:	4ba1      	ldr	r3, [pc, #644]	; (80042f4 <_dtoa_r+0x63c>)
 800406e:	4fa2      	ldr	r7, [pc, #648]	; (80042f8 <_dtoa_r+0x640>)
 8004070:	f006 020f 	and.w	r2, r6, #15
 8004074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	ec51 0b18 	vmov	r0, r1, d8
 8004080:	f7fc faba 	bl	80005f8 <__aeabi_dmul>
 8004084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004088:	1136      	asrs	r6, r6, #4
 800408a:	2300      	movs	r3, #0
 800408c:	2502      	movs	r5, #2
 800408e:	2e00      	cmp	r6, #0
 8004090:	d17e      	bne.n	8004190 <_dtoa_r+0x4d8>
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1d0      	bne.n	8004038 <_dtoa_r+0x380>
 8004096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004098:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8084 	beq.w	80041aa <_dtoa_r+0x4f2>
 80040a2:	4b96      	ldr	r3, [pc, #600]	; (80042fc <_dtoa_r+0x644>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	4640      	mov	r0, r8
 80040a8:	4649      	mov	r1, r9
 80040aa:	f7fc fd17 	bl	8000adc <__aeabi_dcmplt>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d07b      	beq.n	80041aa <_dtoa_r+0x4f2>
 80040b2:	9b04      	ldr	r3, [sp, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d078      	beq.n	80041aa <_dtoa_r+0x4f2>
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	dd39      	ble.n	8004132 <_dtoa_r+0x47a>
 80040be:	4b90      	ldr	r3, [pc, #576]	; (8004300 <_dtoa_r+0x648>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	4640      	mov	r0, r8
 80040c4:	4649      	mov	r1, r9
 80040c6:	f7fc fa97 	bl	80005f8 <__aeabi_dmul>
 80040ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040ce:	9e01      	ldr	r6, [sp, #4]
 80040d0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80040d4:	3501      	adds	r5, #1
 80040d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80040da:	4628      	mov	r0, r5
 80040dc:	f7fc fa22 	bl	8000524 <__aeabi_i2d>
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	f7fc fa88 	bl	80005f8 <__aeabi_dmul>
 80040e8:	4b86      	ldr	r3, [pc, #536]	; (8004304 <_dtoa_r+0x64c>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	f7fc f8ce 	bl	800028c <__adddf3>
 80040f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80040f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80040f8:	9303      	str	r3, [sp, #12]
 80040fa:	2e00      	cmp	r6, #0
 80040fc:	d158      	bne.n	80041b0 <_dtoa_r+0x4f8>
 80040fe:	4b82      	ldr	r3, [pc, #520]	; (8004308 <_dtoa_r+0x650>)
 8004100:	2200      	movs	r2, #0
 8004102:	4640      	mov	r0, r8
 8004104:	4649      	mov	r1, r9
 8004106:	f7fc f8bf 	bl	8000288 <__aeabi_dsub>
 800410a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800410e:	4680      	mov	r8, r0
 8004110:	4689      	mov	r9, r1
 8004112:	f7fc fd01 	bl	8000b18 <__aeabi_dcmpgt>
 8004116:	2800      	cmp	r0, #0
 8004118:	f040 8296 	bne.w	8004648 <_dtoa_r+0x990>
 800411c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004120:	4640      	mov	r0, r8
 8004122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004126:	4649      	mov	r1, r9
 8004128:	f7fc fcd8 	bl	8000adc <__aeabi_dcmplt>
 800412c:	2800      	cmp	r0, #0
 800412e:	f040 8289 	bne.w	8004644 <_dtoa_r+0x98c>
 8004132:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004138:	2b00      	cmp	r3, #0
 800413a:	f2c0 814e 	blt.w	80043da <_dtoa_r+0x722>
 800413e:	f1bb 0f0e 	cmp.w	fp, #14
 8004142:	f300 814a 	bgt.w	80043da <_dtoa_r+0x722>
 8004146:	4b6b      	ldr	r3, [pc, #428]	; (80042f4 <_dtoa_r+0x63c>)
 8004148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800414c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004152:	2b00      	cmp	r3, #0
 8004154:	f280 80dc 	bge.w	8004310 <_dtoa_r+0x658>
 8004158:	9b04      	ldr	r3, [sp, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f300 80d8 	bgt.w	8004310 <_dtoa_r+0x658>
 8004160:	f040 826f 	bne.w	8004642 <_dtoa_r+0x98a>
 8004164:	4b68      	ldr	r3, [pc, #416]	; (8004308 <_dtoa_r+0x650>)
 8004166:	2200      	movs	r2, #0
 8004168:	4640      	mov	r0, r8
 800416a:	4649      	mov	r1, r9
 800416c:	f7fc fa44 	bl	80005f8 <__aeabi_dmul>
 8004170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004174:	f7fc fcc6 	bl	8000b04 <__aeabi_dcmpge>
 8004178:	9e04      	ldr	r6, [sp, #16]
 800417a:	4637      	mov	r7, r6
 800417c:	2800      	cmp	r0, #0
 800417e:	f040 8245 	bne.w	800460c <_dtoa_r+0x954>
 8004182:	9d00      	ldr	r5, [sp, #0]
 8004184:	2331      	movs	r3, #49	; 0x31
 8004186:	f805 3b01 	strb.w	r3, [r5], #1
 800418a:	f10b 0b01 	add.w	fp, fp, #1
 800418e:	e241      	b.n	8004614 <_dtoa_r+0x95c>
 8004190:	07f2      	lsls	r2, r6, #31
 8004192:	d505      	bpl.n	80041a0 <_dtoa_r+0x4e8>
 8004194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004198:	f7fc fa2e 	bl	80005f8 <__aeabi_dmul>
 800419c:	3501      	adds	r5, #1
 800419e:	2301      	movs	r3, #1
 80041a0:	1076      	asrs	r6, r6, #1
 80041a2:	3708      	adds	r7, #8
 80041a4:	e773      	b.n	800408e <_dtoa_r+0x3d6>
 80041a6:	2502      	movs	r5, #2
 80041a8:	e775      	b.n	8004096 <_dtoa_r+0x3de>
 80041aa:	9e04      	ldr	r6, [sp, #16]
 80041ac:	465f      	mov	r7, fp
 80041ae:	e792      	b.n	80040d6 <_dtoa_r+0x41e>
 80041b0:	9900      	ldr	r1, [sp, #0]
 80041b2:	4b50      	ldr	r3, [pc, #320]	; (80042f4 <_dtoa_r+0x63c>)
 80041b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041b8:	4431      	add	r1, r6
 80041ba:	9102      	str	r1, [sp, #8]
 80041bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041be:	eeb0 9a47 	vmov.f32	s18, s14
 80041c2:	eef0 9a67 	vmov.f32	s19, s15
 80041c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80041ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80041ce:	2900      	cmp	r1, #0
 80041d0:	d044      	beq.n	800425c <_dtoa_r+0x5a4>
 80041d2:	494e      	ldr	r1, [pc, #312]	; (800430c <_dtoa_r+0x654>)
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fc fb39 	bl	800084c <__aeabi_ddiv>
 80041da:	ec53 2b19 	vmov	r2, r3, d9
 80041de:	f7fc f853 	bl	8000288 <__aeabi_dsub>
 80041e2:	9d00      	ldr	r5, [sp, #0]
 80041e4:	ec41 0b19 	vmov	d9, r0, r1
 80041e8:	4649      	mov	r1, r9
 80041ea:	4640      	mov	r0, r8
 80041ec:	f7fc fcb4 	bl	8000b58 <__aeabi_d2iz>
 80041f0:	4606      	mov	r6, r0
 80041f2:	f7fc f997 	bl	8000524 <__aeabi_i2d>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4640      	mov	r0, r8
 80041fc:	4649      	mov	r1, r9
 80041fe:	f7fc f843 	bl	8000288 <__aeabi_dsub>
 8004202:	3630      	adds	r6, #48	; 0x30
 8004204:	f805 6b01 	strb.w	r6, [r5], #1
 8004208:	ec53 2b19 	vmov	r2, r3, d9
 800420c:	4680      	mov	r8, r0
 800420e:	4689      	mov	r9, r1
 8004210:	f7fc fc64 	bl	8000adc <__aeabi_dcmplt>
 8004214:	2800      	cmp	r0, #0
 8004216:	d164      	bne.n	80042e2 <_dtoa_r+0x62a>
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	4937      	ldr	r1, [pc, #220]	; (80042fc <_dtoa_r+0x644>)
 800421e:	2000      	movs	r0, #0
 8004220:	f7fc f832 	bl	8000288 <__aeabi_dsub>
 8004224:	ec53 2b19 	vmov	r2, r3, d9
 8004228:	f7fc fc58 	bl	8000adc <__aeabi_dcmplt>
 800422c:	2800      	cmp	r0, #0
 800422e:	f040 80b6 	bne.w	800439e <_dtoa_r+0x6e6>
 8004232:	9b02      	ldr	r3, [sp, #8]
 8004234:	429d      	cmp	r5, r3
 8004236:	f43f af7c 	beq.w	8004132 <_dtoa_r+0x47a>
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <_dtoa_r+0x648>)
 800423c:	ec51 0b19 	vmov	r0, r1, d9
 8004240:	2200      	movs	r2, #0
 8004242:	f7fc f9d9 	bl	80005f8 <__aeabi_dmul>
 8004246:	4b2e      	ldr	r3, [pc, #184]	; (8004300 <_dtoa_r+0x648>)
 8004248:	ec41 0b19 	vmov	d9, r0, r1
 800424c:	2200      	movs	r2, #0
 800424e:	4640      	mov	r0, r8
 8004250:	4649      	mov	r1, r9
 8004252:	f7fc f9d1 	bl	80005f8 <__aeabi_dmul>
 8004256:	4680      	mov	r8, r0
 8004258:	4689      	mov	r9, r1
 800425a:	e7c5      	b.n	80041e8 <_dtoa_r+0x530>
 800425c:	ec51 0b17 	vmov	r0, r1, d7
 8004260:	f7fc f9ca 	bl	80005f8 <__aeabi_dmul>
 8004264:	9b02      	ldr	r3, [sp, #8]
 8004266:	9d00      	ldr	r5, [sp, #0]
 8004268:	930f      	str	r3, [sp, #60]	; 0x3c
 800426a:	ec41 0b19 	vmov	d9, r0, r1
 800426e:	4649      	mov	r1, r9
 8004270:	4640      	mov	r0, r8
 8004272:	f7fc fc71 	bl	8000b58 <__aeabi_d2iz>
 8004276:	4606      	mov	r6, r0
 8004278:	f7fc f954 	bl	8000524 <__aeabi_i2d>
 800427c:	3630      	adds	r6, #48	; 0x30
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4640      	mov	r0, r8
 8004284:	4649      	mov	r1, r9
 8004286:	f7fb ffff 	bl	8000288 <__aeabi_dsub>
 800428a:	f805 6b01 	strb.w	r6, [r5], #1
 800428e:	9b02      	ldr	r3, [sp, #8]
 8004290:	429d      	cmp	r5, r3
 8004292:	4680      	mov	r8, r0
 8004294:	4689      	mov	r9, r1
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	d124      	bne.n	80042e6 <_dtoa_r+0x62e>
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <_dtoa_r+0x654>)
 800429e:	ec51 0b19 	vmov	r0, r1, d9
 80042a2:	f7fb fff3 	bl	800028c <__adddf3>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4640      	mov	r0, r8
 80042ac:	4649      	mov	r1, r9
 80042ae:	f7fc fc33 	bl	8000b18 <__aeabi_dcmpgt>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d173      	bne.n	800439e <_dtoa_r+0x6e6>
 80042b6:	ec53 2b19 	vmov	r2, r3, d9
 80042ba:	4914      	ldr	r1, [pc, #80]	; (800430c <_dtoa_r+0x654>)
 80042bc:	2000      	movs	r0, #0
 80042be:	f7fb ffe3 	bl	8000288 <__aeabi_dsub>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4640      	mov	r0, r8
 80042c8:	4649      	mov	r1, r9
 80042ca:	f7fc fc07 	bl	8000adc <__aeabi_dcmplt>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	f43f af2f 	beq.w	8004132 <_dtoa_r+0x47a>
 80042d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80042d6:	1e6b      	subs	r3, r5, #1
 80042d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80042da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042de:	2b30      	cmp	r3, #48	; 0x30
 80042e0:	d0f8      	beq.n	80042d4 <_dtoa_r+0x61c>
 80042e2:	46bb      	mov	fp, r7
 80042e4:	e04a      	b.n	800437c <_dtoa_r+0x6c4>
 80042e6:	4b06      	ldr	r3, [pc, #24]	; (8004300 <_dtoa_r+0x648>)
 80042e8:	f7fc f986 	bl	80005f8 <__aeabi_dmul>
 80042ec:	4680      	mov	r8, r0
 80042ee:	4689      	mov	r9, r1
 80042f0:	e7bd      	b.n	800426e <_dtoa_r+0x5b6>
 80042f2:	bf00      	nop
 80042f4:	08005ab8 	.word	0x08005ab8
 80042f8:	08005a90 	.word	0x08005a90
 80042fc:	3ff00000 	.word	0x3ff00000
 8004300:	40240000 	.word	0x40240000
 8004304:	401c0000 	.word	0x401c0000
 8004308:	40140000 	.word	0x40140000
 800430c:	3fe00000 	.word	0x3fe00000
 8004310:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004314:	9d00      	ldr	r5, [sp, #0]
 8004316:	4642      	mov	r2, r8
 8004318:	464b      	mov	r3, r9
 800431a:	4630      	mov	r0, r6
 800431c:	4639      	mov	r1, r7
 800431e:	f7fc fa95 	bl	800084c <__aeabi_ddiv>
 8004322:	f7fc fc19 	bl	8000b58 <__aeabi_d2iz>
 8004326:	9001      	str	r0, [sp, #4]
 8004328:	f7fc f8fc 	bl	8000524 <__aeabi_i2d>
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	f7fc f962 	bl	80005f8 <__aeabi_dmul>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fb ffa4 	bl	8000288 <__aeabi_dsub>
 8004340:	9e01      	ldr	r6, [sp, #4]
 8004342:	9f04      	ldr	r7, [sp, #16]
 8004344:	3630      	adds	r6, #48	; 0x30
 8004346:	f805 6b01 	strb.w	r6, [r5], #1
 800434a:	9e00      	ldr	r6, [sp, #0]
 800434c:	1bae      	subs	r6, r5, r6
 800434e:	42b7      	cmp	r7, r6
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	d134      	bne.n	80043c0 <_dtoa_r+0x708>
 8004356:	f7fb ff99 	bl	800028c <__adddf3>
 800435a:	4642      	mov	r2, r8
 800435c:	464b      	mov	r3, r9
 800435e:	4606      	mov	r6, r0
 8004360:	460f      	mov	r7, r1
 8004362:	f7fc fbd9 	bl	8000b18 <__aeabi_dcmpgt>
 8004366:	b9c8      	cbnz	r0, 800439c <_dtoa_r+0x6e4>
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	4630      	mov	r0, r6
 800436e:	4639      	mov	r1, r7
 8004370:	f7fc fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8004374:	b110      	cbz	r0, 800437c <_dtoa_r+0x6c4>
 8004376:	9b01      	ldr	r3, [sp, #4]
 8004378:	07db      	lsls	r3, r3, #31
 800437a:	d40f      	bmi.n	800439c <_dtoa_r+0x6e4>
 800437c:	4651      	mov	r1, sl
 800437e:	4620      	mov	r0, r4
 8004380:	f000 fbcc 	bl	8004b1c <_Bfree>
 8004384:	2300      	movs	r3, #0
 8004386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004388:	702b      	strb	r3, [r5, #0]
 800438a:	f10b 0301 	add.w	r3, fp, #1
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004392:	2b00      	cmp	r3, #0
 8004394:	f43f ace2 	beq.w	8003d5c <_dtoa_r+0xa4>
 8004398:	601d      	str	r5, [r3, #0]
 800439a:	e4df      	b.n	8003d5c <_dtoa_r+0xa4>
 800439c:	465f      	mov	r7, fp
 800439e:	462b      	mov	r3, r5
 80043a0:	461d      	mov	r5, r3
 80043a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043a6:	2a39      	cmp	r2, #57	; 0x39
 80043a8:	d106      	bne.n	80043b8 <_dtoa_r+0x700>
 80043aa:	9a00      	ldr	r2, [sp, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1f7      	bne.n	80043a0 <_dtoa_r+0x6e8>
 80043b0:	9900      	ldr	r1, [sp, #0]
 80043b2:	2230      	movs	r2, #48	; 0x30
 80043b4:	3701      	adds	r7, #1
 80043b6:	700a      	strb	r2, [r1, #0]
 80043b8:	781a      	ldrb	r2, [r3, #0]
 80043ba:	3201      	adds	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e790      	b.n	80042e2 <_dtoa_r+0x62a>
 80043c0:	4ba3      	ldr	r3, [pc, #652]	; (8004650 <_dtoa_r+0x998>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	f7fc f918 	bl	80005f8 <__aeabi_dmul>
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	4606      	mov	r6, r0
 80043ce:	460f      	mov	r7, r1
 80043d0:	f7fc fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d09e      	beq.n	8004316 <_dtoa_r+0x65e>
 80043d8:	e7d0      	b.n	800437c <_dtoa_r+0x6c4>
 80043da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043dc:	2a00      	cmp	r2, #0
 80043de:	f000 80ca 	beq.w	8004576 <_dtoa_r+0x8be>
 80043e2:	9a07      	ldr	r2, [sp, #28]
 80043e4:	2a01      	cmp	r2, #1
 80043e6:	f300 80ad 	bgt.w	8004544 <_dtoa_r+0x88c>
 80043ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043ec:	2a00      	cmp	r2, #0
 80043ee:	f000 80a5 	beq.w	800453c <_dtoa_r+0x884>
 80043f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043f6:	9e08      	ldr	r6, [sp, #32]
 80043f8:	9d05      	ldr	r5, [sp, #20]
 80043fa:	9a05      	ldr	r2, [sp, #20]
 80043fc:	441a      	add	r2, r3
 80043fe:	9205      	str	r2, [sp, #20]
 8004400:	9a06      	ldr	r2, [sp, #24]
 8004402:	2101      	movs	r1, #1
 8004404:	441a      	add	r2, r3
 8004406:	4620      	mov	r0, r4
 8004408:	9206      	str	r2, [sp, #24]
 800440a:	f000 fc3d 	bl	8004c88 <__i2b>
 800440e:	4607      	mov	r7, r0
 8004410:	b165      	cbz	r5, 800442c <_dtoa_r+0x774>
 8004412:	9b06      	ldr	r3, [sp, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	dd09      	ble.n	800442c <_dtoa_r+0x774>
 8004418:	42ab      	cmp	r3, r5
 800441a:	9a05      	ldr	r2, [sp, #20]
 800441c:	bfa8      	it	ge
 800441e:	462b      	movge	r3, r5
 8004420:	1ad2      	subs	r2, r2, r3
 8004422:	9205      	str	r2, [sp, #20]
 8004424:	9a06      	ldr	r2, [sp, #24]
 8004426:	1aed      	subs	r5, r5, r3
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	9306      	str	r3, [sp, #24]
 800442c:	9b08      	ldr	r3, [sp, #32]
 800442e:	b1f3      	cbz	r3, 800446e <_dtoa_r+0x7b6>
 8004430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80a3 	beq.w	800457e <_dtoa_r+0x8c6>
 8004438:	2e00      	cmp	r6, #0
 800443a:	dd10      	ble.n	800445e <_dtoa_r+0x7a6>
 800443c:	4639      	mov	r1, r7
 800443e:	4632      	mov	r2, r6
 8004440:	4620      	mov	r0, r4
 8004442:	f000 fce1 	bl	8004e08 <__pow5mult>
 8004446:	4652      	mov	r2, sl
 8004448:	4601      	mov	r1, r0
 800444a:	4607      	mov	r7, r0
 800444c:	4620      	mov	r0, r4
 800444e:	f000 fc31 	bl	8004cb4 <__multiply>
 8004452:	4651      	mov	r1, sl
 8004454:	4680      	mov	r8, r0
 8004456:	4620      	mov	r0, r4
 8004458:	f000 fb60 	bl	8004b1c <_Bfree>
 800445c:	46c2      	mov	sl, r8
 800445e:	9b08      	ldr	r3, [sp, #32]
 8004460:	1b9a      	subs	r2, r3, r6
 8004462:	d004      	beq.n	800446e <_dtoa_r+0x7b6>
 8004464:	4651      	mov	r1, sl
 8004466:	4620      	mov	r0, r4
 8004468:	f000 fcce 	bl	8004e08 <__pow5mult>
 800446c:	4682      	mov	sl, r0
 800446e:	2101      	movs	r1, #1
 8004470:	4620      	mov	r0, r4
 8004472:	f000 fc09 	bl	8004c88 <__i2b>
 8004476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004478:	2b00      	cmp	r3, #0
 800447a:	4606      	mov	r6, r0
 800447c:	f340 8081 	ble.w	8004582 <_dtoa_r+0x8ca>
 8004480:	461a      	mov	r2, r3
 8004482:	4601      	mov	r1, r0
 8004484:	4620      	mov	r0, r4
 8004486:	f000 fcbf 	bl	8004e08 <__pow5mult>
 800448a:	9b07      	ldr	r3, [sp, #28]
 800448c:	2b01      	cmp	r3, #1
 800448e:	4606      	mov	r6, r0
 8004490:	dd7a      	ble.n	8004588 <_dtoa_r+0x8d0>
 8004492:	f04f 0800 	mov.w	r8, #0
 8004496:	6933      	ldr	r3, [r6, #16]
 8004498:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800449c:	6918      	ldr	r0, [r3, #16]
 800449e:	f000 fba5 	bl	8004bec <__hi0bits>
 80044a2:	f1c0 0020 	rsb	r0, r0, #32
 80044a6:	9b06      	ldr	r3, [sp, #24]
 80044a8:	4418      	add	r0, r3
 80044aa:	f010 001f 	ands.w	r0, r0, #31
 80044ae:	f000 8094 	beq.w	80045da <_dtoa_r+0x922>
 80044b2:	f1c0 0320 	rsb	r3, r0, #32
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	f340 8085 	ble.w	80045c6 <_dtoa_r+0x90e>
 80044bc:	9b05      	ldr	r3, [sp, #20]
 80044be:	f1c0 001c 	rsb	r0, r0, #28
 80044c2:	4403      	add	r3, r0
 80044c4:	9305      	str	r3, [sp, #20]
 80044c6:	9b06      	ldr	r3, [sp, #24]
 80044c8:	4403      	add	r3, r0
 80044ca:	4405      	add	r5, r0
 80044cc:	9306      	str	r3, [sp, #24]
 80044ce:	9b05      	ldr	r3, [sp, #20]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	dd05      	ble.n	80044e0 <_dtoa_r+0x828>
 80044d4:	4651      	mov	r1, sl
 80044d6:	461a      	mov	r2, r3
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 fcef 	bl	8004ebc <__lshift>
 80044de:	4682      	mov	sl, r0
 80044e0:	9b06      	ldr	r3, [sp, #24]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dd05      	ble.n	80044f2 <_dtoa_r+0x83a>
 80044e6:	4631      	mov	r1, r6
 80044e8:	461a      	mov	r2, r3
 80044ea:	4620      	mov	r0, r4
 80044ec:	f000 fce6 	bl	8004ebc <__lshift>
 80044f0:	4606      	mov	r6, r0
 80044f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d072      	beq.n	80045de <_dtoa_r+0x926>
 80044f8:	4631      	mov	r1, r6
 80044fa:	4650      	mov	r0, sl
 80044fc:	f000 fd4a 	bl	8004f94 <__mcmp>
 8004500:	2800      	cmp	r0, #0
 8004502:	da6c      	bge.n	80045de <_dtoa_r+0x926>
 8004504:	2300      	movs	r3, #0
 8004506:	4651      	mov	r1, sl
 8004508:	220a      	movs	r2, #10
 800450a:	4620      	mov	r0, r4
 800450c:	f000 fb28 	bl	8004b60 <__multadd>
 8004510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004512:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004516:	4682      	mov	sl, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 81b0 	beq.w	800487e <_dtoa_r+0xbc6>
 800451e:	2300      	movs	r3, #0
 8004520:	4639      	mov	r1, r7
 8004522:	220a      	movs	r2, #10
 8004524:	4620      	mov	r0, r4
 8004526:	f000 fb1b 	bl	8004b60 <__multadd>
 800452a:	9b01      	ldr	r3, [sp, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	4607      	mov	r7, r0
 8004530:	f300 8096 	bgt.w	8004660 <_dtoa_r+0x9a8>
 8004534:	9b07      	ldr	r3, [sp, #28]
 8004536:	2b02      	cmp	r3, #2
 8004538:	dc59      	bgt.n	80045ee <_dtoa_r+0x936>
 800453a:	e091      	b.n	8004660 <_dtoa_r+0x9a8>
 800453c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800453e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004542:	e758      	b.n	80043f6 <_dtoa_r+0x73e>
 8004544:	9b04      	ldr	r3, [sp, #16]
 8004546:	1e5e      	subs	r6, r3, #1
 8004548:	9b08      	ldr	r3, [sp, #32]
 800454a:	42b3      	cmp	r3, r6
 800454c:	bfbf      	itttt	lt
 800454e:	9b08      	ldrlt	r3, [sp, #32]
 8004550:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004552:	9608      	strlt	r6, [sp, #32]
 8004554:	1af3      	sublt	r3, r6, r3
 8004556:	bfb4      	ite	lt
 8004558:	18d2      	addlt	r2, r2, r3
 800455a:	1b9e      	subge	r6, r3, r6
 800455c:	9b04      	ldr	r3, [sp, #16]
 800455e:	bfbc      	itt	lt
 8004560:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004562:	2600      	movlt	r6, #0
 8004564:	2b00      	cmp	r3, #0
 8004566:	bfb7      	itett	lt
 8004568:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800456c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004570:	1a9d      	sublt	r5, r3, r2
 8004572:	2300      	movlt	r3, #0
 8004574:	e741      	b.n	80043fa <_dtoa_r+0x742>
 8004576:	9e08      	ldr	r6, [sp, #32]
 8004578:	9d05      	ldr	r5, [sp, #20]
 800457a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800457c:	e748      	b.n	8004410 <_dtoa_r+0x758>
 800457e:	9a08      	ldr	r2, [sp, #32]
 8004580:	e770      	b.n	8004464 <_dtoa_r+0x7ac>
 8004582:	9b07      	ldr	r3, [sp, #28]
 8004584:	2b01      	cmp	r3, #1
 8004586:	dc19      	bgt.n	80045bc <_dtoa_r+0x904>
 8004588:	9b02      	ldr	r3, [sp, #8]
 800458a:	b9bb      	cbnz	r3, 80045bc <_dtoa_r+0x904>
 800458c:	9b03      	ldr	r3, [sp, #12]
 800458e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004592:	b99b      	cbnz	r3, 80045bc <_dtoa_r+0x904>
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800459a:	0d1b      	lsrs	r3, r3, #20
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	b183      	cbz	r3, 80045c2 <_dtoa_r+0x90a>
 80045a0:	9b05      	ldr	r3, [sp, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	9b06      	ldr	r3, [sp, #24]
 80045a8:	3301      	adds	r3, #1
 80045aa:	9306      	str	r3, [sp, #24]
 80045ac:	f04f 0801 	mov.w	r8, #1
 80045b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f47f af6f 	bne.w	8004496 <_dtoa_r+0x7de>
 80045b8:	2001      	movs	r0, #1
 80045ba:	e774      	b.n	80044a6 <_dtoa_r+0x7ee>
 80045bc:	f04f 0800 	mov.w	r8, #0
 80045c0:	e7f6      	b.n	80045b0 <_dtoa_r+0x8f8>
 80045c2:	4698      	mov	r8, r3
 80045c4:	e7f4      	b.n	80045b0 <_dtoa_r+0x8f8>
 80045c6:	d082      	beq.n	80044ce <_dtoa_r+0x816>
 80045c8:	9a05      	ldr	r2, [sp, #20]
 80045ca:	331c      	adds	r3, #28
 80045cc:	441a      	add	r2, r3
 80045ce:	9205      	str	r2, [sp, #20]
 80045d0:	9a06      	ldr	r2, [sp, #24]
 80045d2:	441a      	add	r2, r3
 80045d4:	441d      	add	r5, r3
 80045d6:	9206      	str	r2, [sp, #24]
 80045d8:	e779      	b.n	80044ce <_dtoa_r+0x816>
 80045da:	4603      	mov	r3, r0
 80045dc:	e7f4      	b.n	80045c8 <_dtoa_r+0x910>
 80045de:	9b04      	ldr	r3, [sp, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	dc37      	bgt.n	8004654 <_dtoa_r+0x99c>
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	dd34      	ble.n	8004654 <_dtoa_r+0x99c>
 80045ea:	9b04      	ldr	r3, [sp, #16]
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	b963      	cbnz	r3, 800460c <_dtoa_r+0x954>
 80045f2:	4631      	mov	r1, r6
 80045f4:	2205      	movs	r2, #5
 80045f6:	4620      	mov	r0, r4
 80045f8:	f000 fab2 	bl	8004b60 <__multadd>
 80045fc:	4601      	mov	r1, r0
 80045fe:	4606      	mov	r6, r0
 8004600:	4650      	mov	r0, sl
 8004602:	f000 fcc7 	bl	8004f94 <__mcmp>
 8004606:	2800      	cmp	r0, #0
 8004608:	f73f adbb 	bgt.w	8004182 <_dtoa_r+0x4ca>
 800460c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800460e:	9d00      	ldr	r5, [sp, #0]
 8004610:	ea6f 0b03 	mvn.w	fp, r3
 8004614:	f04f 0800 	mov.w	r8, #0
 8004618:	4631      	mov	r1, r6
 800461a:	4620      	mov	r0, r4
 800461c:	f000 fa7e 	bl	8004b1c <_Bfree>
 8004620:	2f00      	cmp	r7, #0
 8004622:	f43f aeab 	beq.w	800437c <_dtoa_r+0x6c4>
 8004626:	f1b8 0f00 	cmp.w	r8, #0
 800462a:	d005      	beq.n	8004638 <_dtoa_r+0x980>
 800462c:	45b8      	cmp	r8, r7
 800462e:	d003      	beq.n	8004638 <_dtoa_r+0x980>
 8004630:	4641      	mov	r1, r8
 8004632:	4620      	mov	r0, r4
 8004634:	f000 fa72 	bl	8004b1c <_Bfree>
 8004638:	4639      	mov	r1, r7
 800463a:	4620      	mov	r0, r4
 800463c:	f000 fa6e 	bl	8004b1c <_Bfree>
 8004640:	e69c      	b.n	800437c <_dtoa_r+0x6c4>
 8004642:	2600      	movs	r6, #0
 8004644:	4637      	mov	r7, r6
 8004646:	e7e1      	b.n	800460c <_dtoa_r+0x954>
 8004648:	46bb      	mov	fp, r7
 800464a:	4637      	mov	r7, r6
 800464c:	e599      	b.n	8004182 <_dtoa_r+0x4ca>
 800464e:	bf00      	nop
 8004650:	40240000 	.word	0x40240000
 8004654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80c8 	beq.w	80047ec <_dtoa_r+0xb34>
 800465c:	9b04      	ldr	r3, [sp, #16]
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2d00      	cmp	r5, #0
 8004662:	dd05      	ble.n	8004670 <_dtoa_r+0x9b8>
 8004664:	4639      	mov	r1, r7
 8004666:	462a      	mov	r2, r5
 8004668:	4620      	mov	r0, r4
 800466a:	f000 fc27 	bl	8004ebc <__lshift>
 800466e:	4607      	mov	r7, r0
 8004670:	f1b8 0f00 	cmp.w	r8, #0
 8004674:	d05b      	beq.n	800472e <_dtoa_r+0xa76>
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4620      	mov	r0, r4
 800467a:	f000 fa0f 	bl	8004a9c <_Balloc>
 800467e:	4605      	mov	r5, r0
 8004680:	b928      	cbnz	r0, 800468e <_dtoa_r+0x9d6>
 8004682:	4b83      	ldr	r3, [pc, #524]	; (8004890 <_dtoa_r+0xbd8>)
 8004684:	4602      	mov	r2, r0
 8004686:	f240 21ef 	movw	r1, #751	; 0x2ef
 800468a:	f7ff bb2e 	b.w	8003cea <_dtoa_r+0x32>
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	3202      	adds	r2, #2
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	f107 010c 	add.w	r1, r7, #12
 8004698:	300c      	adds	r0, #12
 800469a:	f000 fe39 	bl	8005310 <memcpy>
 800469e:	2201      	movs	r2, #1
 80046a0:	4629      	mov	r1, r5
 80046a2:	4620      	mov	r0, r4
 80046a4:	f000 fc0a 	bl	8004ebc <__lshift>
 80046a8:	9b00      	ldr	r3, [sp, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046b2:	4413      	add	r3, r2
 80046b4:	9308      	str	r3, [sp, #32]
 80046b6:	9b02      	ldr	r3, [sp, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	46b8      	mov	r8, r7
 80046be:	9306      	str	r3, [sp, #24]
 80046c0:	4607      	mov	r7, r0
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	4631      	mov	r1, r6
 80046c6:	3b01      	subs	r3, #1
 80046c8:	4650      	mov	r0, sl
 80046ca:	9301      	str	r3, [sp, #4]
 80046cc:	f7ff fa69 	bl	8003ba2 <quorem>
 80046d0:	4641      	mov	r1, r8
 80046d2:	9002      	str	r0, [sp, #8]
 80046d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80046d8:	4650      	mov	r0, sl
 80046da:	f000 fc5b 	bl	8004f94 <__mcmp>
 80046de:	463a      	mov	r2, r7
 80046e0:	9005      	str	r0, [sp, #20]
 80046e2:	4631      	mov	r1, r6
 80046e4:	4620      	mov	r0, r4
 80046e6:	f000 fc71 	bl	8004fcc <__mdiff>
 80046ea:	68c2      	ldr	r2, [r0, #12]
 80046ec:	4605      	mov	r5, r0
 80046ee:	bb02      	cbnz	r2, 8004732 <_dtoa_r+0xa7a>
 80046f0:	4601      	mov	r1, r0
 80046f2:	4650      	mov	r0, sl
 80046f4:	f000 fc4e 	bl	8004f94 <__mcmp>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4629      	mov	r1, r5
 80046fc:	4620      	mov	r0, r4
 80046fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004700:	f000 fa0c 	bl	8004b1c <_Bfree>
 8004704:	9b07      	ldr	r3, [sp, #28]
 8004706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004708:	9d04      	ldr	r5, [sp, #16]
 800470a:	ea43 0102 	orr.w	r1, r3, r2
 800470e:	9b06      	ldr	r3, [sp, #24]
 8004710:	4319      	orrs	r1, r3
 8004712:	d110      	bne.n	8004736 <_dtoa_r+0xa7e>
 8004714:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004718:	d029      	beq.n	800476e <_dtoa_r+0xab6>
 800471a:	9b05      	ldr	r3, [sp, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	dd02      	ble.n	8004726 <_dtoa_r+0xa6e>
 8004720:	9b02      	ldr	r3, [sp, #8]
 8004722:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	f883 9000 	strb.w	r9, [r3]
 800472c:	e774      	b.n	8004618 <_dtoa_r+0x960>
 800472e:	4638      	mov	r0, r7
 8004730:	e7ba      	b.n	80046a8 <_dtoa_r+0x9f0>
 8004732:	2201      	movs	r2, #1
 8004734:	e7e1      	b.n	80046fa <_dtoa_r+0xa42>
 8004736:	9b05      	ldr	r3, [sp, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	db04      	blt.n	8004746 <_dtoa_r+0xa8e>
 800473c:	9907      	ldr	r1, [sp, #28]
 800473e:	430b      	orrs	r3, r1
 8004740:	9906      	ldr	r1, [sp, #24]
 8004742:	430b      	orrs	r3, r1
 8004744:	d120      	bne.n	8004788 <_dtoa_r+0xad0>
 8004746:	2a00      	cmp	r2, #0
 8004748:	dded      	ble.n	8004726 <_dtoa_r+0xa6e>
 800474a:	4651      	mov	r1, sl
 800474c:	2201      	movs	r2, #1
 800474e:	4620      	mov	r0, r4
 8004750:	f000 fbb4 	bl	8004ebc <__lshift>
 8004754:	4631      	mov	r1, r6
 8004756:	4682      	mov	sl, r0
 8004758:	f000 fc1c 	bl	8004f94 <__mcmp>
 800475c:	2800      	cmp	r0, #0
 800475e:	dc03      	bgt.n	8004768 <_dtoa_r+0xab0>
 8004760:	d1e1      	bne.n	8004726 <_dtoa_r+0xa6e>
 8004762:	f019 0f01 	tst.w	r9, #1
 8004766:	d0de      	beq.n	8004726 <_dtoa_r+0xa6e>
 8004768:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800476c:	d1d8      	bne.n	8004720 <_dtoa_r+0xa68>
 800476e:	9a01      	ldr	r2, [sp, #4]
 8004770:	2339      	movs	r3, #57	; 0x39
 8004772:	7013      	strb	r3, [r2, #0]
 8004774:	462b      	mov	r3, r5
 8004776:	461d      	mov	r5, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800477e:	2a39      	cmp	r2, #57	; 0x39
 8004780:	d06c      	beq.n	800485c <_dtoa_r+0xba4>
 8004782:	3201      	adds	r2, #1
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e747      	b.n	8004618 <_dtoa_r+0x960>
 8004788:	2a00      	cmp	r2, #0
 800478a:	dd07      	ble.n	800479c <_dtoa_r+0xae4>
 800478c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004790:	d0ed      	beq.n	800476e <_dtoa_r+0xab6>
 8004792:	9a01      	ldr	r2, [sp, #4]
 8004794:	f109 0301 	add.w	r3, r9, #1
 8004798:	7013      	strb	r3, [r2, #0]
 800479a:	e73d      	b.n	8004618 <_dtoa_r+0x960>
 800479c:	9b04      	ldr	r3, [sp, #16]
 800479e:	9a08      	ldr	r2, [sp, #32]
 80047a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d043      	beq.n	8004830 <_dtoa_r+0xb78>
 80047a8:	4651      	mov	r1, sl
 80047aa:	2300      	movs	r3, #0
 80047ac:	220a      	movs	r2, #10
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 f9d6 	bl	8004b60 <__multadd>
 80047b4:	45b8      	cmp	r8, r7
 80047b6:	4682      	mov	sl, r0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	f04f 020a 	mov.w	r2, #10
 80047c0:	4641      	mov	r1, r8
 80047c2:	4620      	mov	r0, r4
 80047c4:	d107      	bne.n	80047d6 <_dtoa_r+0xb1e>
 80047c6:	f000 f9cb 	bl	8004b60 <__multadd>
 80047ca:	4680      	mov	r8, r0
 80047cc:	4607      	mov	r7, r0
 80047ce:	9b04      	ldr	r3, [sp, #16]
 80047d0:	3301      	adds	r3, #1
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	e775      	b.n	80046c2 <_dtoa_r+0xa0a>
 80047d6:	f000 f9c3 	bl	8004b60 <__multadd>
 80047da:	4639      	mov	r1, r7
 80047dc:	4680      	mov	r8, r0
 80047de:	2300      	movs	r3, #0
 80047e0:	220a      	movs	r2, #10
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f9bc 	bl	8004b60 <__multadd>
 80047e8:	4607      	mov	r7, r0
 80047ea:	e7f0      	b.n	80047ce <_dtoa_r+0xb16>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	9d00      	ldr	r5, [sp, #0]
 80047f2:	4631      	mov	r1, r6
 80047f4:	4650      	mov	r0, sl
 80047f6:	f7ff f9d4 	bl	8003ba2 <quorem>
 80047fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047fe:	9b00      	ldr	r3, [sp, #0]
 8004800:	f805 9b01 	strb.w	r9, [r5], #1
 8004804:	1aea      	subs	r2, r5, r3
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	4293      	cmp	r3, r2
 800480a:	dd07      	ble.n	800481c <_dtoa_r+0xb64>
 800480c:	4651      	mov	r1, sl
 800480e:	2300      	movs	r3, #0
 8004810:	220a      	movs	r2, #10
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f9a4 	bl	8004b60 <__multadd>
 8004818:	4682      	mov	sl, r0
 800481a:	e7ea      	b.n	80047f2 <_dtoa_r+0xb3a>
 800481c:	9b01      	ldr	r3, [sp, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	bfc8      	it	gt
 8004822:	461d      	movgt	r5, r3
 8004824:	9b00      	ldr	r3, [sp, #0]
 8004826:	bfd8      	it	le
 8004828:	2501      	movle	r5, #1
 800482a:	441d      	add	r5, r3
 800482c:	f04f 0800 	mov.w	r8, #0
 8004830:	4651      	mov	r1, sl
 8004832:	2201      	movs	r2, #1
 8004834:	4620      	mov	r0, r4
 8004836:	f000 fb41 	bl	8004ebc <__lshift>
 800483a:	4631      	mov	r1, r6
 800483c:	4682      	mov	sl, r0
 800483e:	f000 fba9 	bl	8004f94 <__mcmp>
 8004842:	2800      	cmp	r0, #0
 8004844:	dc96      	bgt.n	8004774 <_dtoa_r+0xabc>
 8004846:	d102      	bne.n	800484e <_dtoa_r+0xb96>
 8004848:	f019 0f01 	tst.w	r9, #1
 800484c:	d192      	bne.n	8004774 <_dtoa_r+0xabc>
 800484e:	462b      	mov	r3, r5
 8004850:	461d      	mov	r5, r3
 8004852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004856:	2a30      	cmp	r2, #48	; 0x30
 8004858:	d0fa      	beq.n	8004850 <_dtoa_r+0xb98>
 800485a:	e6dd      	b.n	8004618 <_dtoa_r+0x960>
 800485c:	9a00      	ldr	r2, [sp, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d189      	bne.n	8004776 <_dtoa_r+0xabe>
 8004862:	f10b 0b01 	add.w	fp, fp, #1
 8004866:	2331      	movs	r3, #49	; 0x31
 8004868:	e796      	b.n	8004798 <_dtoa_r+0xae0>
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <_dtoa_r+0xbdc>)
 800486c:	f7ff ba99 	b.w	8003da2 <_dtoa_r+0xea>
 8004870:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004872:	2b00      	cmp	r3, #0
 8004874:	f47f aa6d 	bne.w	8003d52 <_dtoa_r+0x9a>
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <_dtoa_r+0xbe0>)
 800487a:	f7ff ba92 	b.w	8003da2 <_dtoa_r+0xea>
 800487e:	9b01      	ldr	r3, [sp, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	dcb5      	bgt.n	80047f0 <_dtoa_r+0xb38>
 8004884:	9b07      	ldr	r3, [sp, #28]
 8004886:	2b02      	cmp	r3, #2
 8004888:	f73f aeb1 	bgt.w	80045ee <_dtoa_r+0x936>
 800488c:	e7b0      	b.n	80047f0 <_dtoa_r+0xb38>
 800488e:	bf00      	nop
 8004890:	08005a20 	.word	0x08005a20
 8004894:	08005980 	.word	0x08005980
 8004898:	080059a4 	.word	0x080059a4

0800489c <_free_r>:
 800489c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800489e:	2900      	cmp	r1, #0
 80048a0:	d044      	beq.n	800492c <_free_r+0x90>
 80048a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a6:	9001      	str	r0, [sp, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f1a1 0404 	sub.w	r4, r1, #4
 80048ae:	bfb8      	it	lt
 80048b0:	18e4      	addlt	r4, r4, r3
 80048b2:	f000 f8e7 	bl	8004a84 <__malloc_lock>
 80048b6:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <_free_r+0x94>)
 80048b8:	9801      	ldr	r0, [sp, #4]
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	b933      	cbnz	r3, 80048cc <_free_r+0x30>
 80048be:	6063      	str	r3, [r4, #4]
 80048c0:	6014      	str	r4, [r2, #0]
 80048c2:	b003      	add	sp, #12
 80048c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048c8:	f000 b8e2 	b.w	8004a90 <__malloc_unlock>
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d908      	bls.n	80048e2 <_free_r+0x46>
 80048d0:	6825      	ldr	r5, [r4, #0]
 80048d2:	1961      	adds	r1, r4, r5
 80048d4:	428b      	cmp	r3, r1
 80048d6:	bf01      	itttt	eq
 80048d8:	6819      	ldreq	r1, [r3, #0]
 80048da:	685b      	ldreq	r3, [r3, #4]
 80048dc:	1949      	addeq	r1, r1, r5
 80048de:	6021      	streq	r1, [r4, #0]
 80048e0:	e7ed      	b.n	80048be <_free_r+0x22>
 80048e2:	461a      	mov	r2, r3
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	b10b      	cbz	r3, 80048ec <_free_r+0x50>
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	d9fa      	bls.n	80048e2 <_free_r+0x46>
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	1855      	adds	r5, r2, r1
 80048f0:	42a5      	cmp	r5, r4
 80048f2:	d10b      	bne.n	800490c <_free_r+0x70>
 80048f4:	6824      	ldr	r4, [r4, #0]
 80048f6:	4421      	add	r1, r4
 80048f8:	1854      	adds	r4, r2, r1
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	d1e0      	bne.n	80048c2 <_free_r+0x26>
 8004900:	681c      	ldr	r4, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	6053      	str	r3, [r2, #4]
 8004906:	440c      	add	r4, r1
 8004908:	6014      	str	r4, [r2, #0]
 800490a:	e7da      	b.n	80048c2 <_free_r+0x26>
 800490c:	d902      	bls.n	8004914 <_free_r+0x78>
 800490e:	230c      	movs	r3, #12
 8004910:	6003      	str	r3, [r0, #0]
 8004912:	e7d6      	b.n	80048c2 <_free_r+0x26>
 8004914:	6825      	ldr	r5, [r4, #0]
 8004916:	1961      	adds	r1, r4, r5
 8004918:	428b      	cmp	r3, r1
 800491a:	bf04      	itt	eq
 800491c:	6819      	ldreq	r1, [r3, #0]
 800491e:	685b      	ldreq	r3, [r3, #4]
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	bf04      	itt	eq
 8004924:	1949      	addeq	r1, r1, r5
 8004926:	6021      	streq	r1, [r4, #0]
 8004928:	6054      	str	r4, [r2, #4]
 800492a:	e7ca      	b.n	80048c2 <_free_r+0x26>
 800492c:	b003      	add	sp, #12
 800492e:	bd30      	pop	{r4, r5, pc}
 8004930:	20000384 	.word	0x20000384

08004934 <malloc>:
 8004934:	4b02      	ldr	r3, [pc, #8]	; (8004940 <malloc+0xc>)
 8004936:	4601      	mov	r1, r0
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f000 b823 	b.w	8004984 <_malloc_r>
 800493e:	bf00      	nop
 8004940:	20000064 	.word	0x20000064

08004944 <sbrk_aligned>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4e0e      	ldr	r6, [pc, #56]	; (8004980 <sbrk_aligned+0x3c>)
 8004948:	460c      	mov	r4, r1
 800494a:	6831      	ldr	r1, [r6, #0]
 800494c:	4605      	mov	r5, r0
 800494e:	b911      	cbnz	r1, 8004956 <sbrk_aligned+0x12>
 8004950:	f000 fcce 	bl	80052f0 <_sbrk_r>
 8004954:	6030      	str	r0, [r6, #0]
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 fcc9 	bl	80052f0 <_sbrk_r>
 800495e:	1c43      	adds	r3, r0, #1
 8004960:	d00a      	beq.n	8004978 <sbrk_aligned+0x34>
 8004962:	1cc4      	adds	r4, r0, #3
 8004964:	f024 0403 	bic.w	r4, r4, #3
 8004968:	42a0      	cmp	r0, r4
 800496a:	d007      	beq.n	800497c <sbrk_aligned+0x38>
 800496c:	1a21      	subs	r1, r4, r0
 800496e:	4628      	mov	r0, r5
 8004970:	f000 fcbe 	bl	80052f0 <_sbrk_r>
 8004974:	3001      	adds	r0, #1
 8004976:	d101      	bne.n	800497c <sbrk_aligned+0x38>
 8004978:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800497c:	4620      	mov	r0, r4
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	20000388 	.word	0x20000388

08004984 <_malloc_r>:
 8004984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004988:	1ccd      	adds	r5, r1, #3
 800498a:	f025 0503 	bic.w	r5, r5, #3
 800498e:	3508      	adds	r5, #8
 8004990:	2d0c      	cmp	r5, #12
 8004992:	bf38      	it	cc
 8004994:	250c      	movcc	r5, #12
 8004996:	2d00      	cmp	r5, #0
 8004998:	4607      	mov	r7, r0
 800499a:	db01      	blt.n	80049a0 <_malloc_r+0x1c>
 800499c:	42a9      	cmp	r1, r5
 800499e:	d905      	bls.n	80049ac <_malloc_r+0x28>
 80049a0:	230c      	movs	r3, #12
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	2600      	movs	r6, #0
 80049a6:	4630      	mov	r0, r6
 80049a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a80 <_malloc_r+0xfc>
 80049b0:	f000 f868 	bl	8004a84 <__malloc_lock>
 80049b4:	f8d8 3000 	ldr.w	r3, [r8]
 80049b8:	461c      	mov	r4, r3
 80049ba:	bb5c      	cbnz	r4, 8004a14 <_malloc_r+0x90>
 80049bc:	4629      	mov	r1, r5
 80049be:	4638      	mov	r0, r7
 80049c0:	f7ff ffc0 	bl	8004944 <sbrk_aligned>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	4604      	mov	r4, r0
 80049c8:	d155      	bne.n	8004a76 <_malloc_r+0xf2>
 80049ca:	f8d8 4000 	ldr.w	r4, [r8]
 80049ce:	4626      	mov	r6, r4
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	d145      	bne.n	8004a60 <_malloc_r+0xdc>
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d048      	beq.n	8004a6a <_malloc_r+0xe6>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	4631      	mov	r1, r6
 80049dc:	4638      	mov	r0, r7
 80049de:	eb04 0903 	add.w	r9, r4, r3
 80049e2:	f000 fc85 	bl	80052f0 <_sbrk_r>
 80049e6:	4581      	cmp	r9, r0
 80049e8:	d13f      	bne.n	8004a6a <_malloc_r+0xe6>
 80049ea:	6821      	ldr	r1, [r4, #0]
 80049ec:	1a6d      	subs	r5, r5, r1
 80049ee:	4629      	mov	r1, r5
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7ff ffa7 	bl	8004944 <sbrk_aligned>
 80049f6:	3001      	adds	r0, #1
 80049f8:	d037      	beq.n	8004a6a <_malloc_r+0xe6>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	442b      	add	r3, r5
 80049fe:	6023      	str	r3, [r4, #0]
 8004a00:	f8d8 3000 	ldr.w	r3, [r8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d038      	beq.n	8004a7a <_malloc_r+0xf6>
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	42a2      	cmp	r2, r4
 8004a0c:	d12b      	bne.n	8004a66 <_malloc_r+0xe2>
 8004a0e:	2200      	movs	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	e00f      	b.n	8004a34 <_malloc_r+0xb0>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	1b52      	subs	r2, r2, r5
 8004a18:	d41f      	bmi.n	8004a5a <_malloc_r+0xd6>
 8004a1a:	2a0b      	cmp	r2, #11
 8004a1c:	d917      	bls.n	8004a4e <_malloc_r+0xca>
 8004a1e:	1961      	adds	r1, r4, r5
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	6025      	str	r5, [r4, #0]
 8004a24:	bf18      	it	ne
 8004a26:	6059      	strne	r1, [r3, #4]
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	bf08      	it	eq
 8004a2c:	f8c8 1000 	streq.w	r1, [r8]
 8004a30:	5162      	str	r2, [r4, r5]
 8004a32:	604b      	str	r3, [r1, #4]
 8004a34:	4638      	mov	r0, r7
 8004a36:	f104 060b 	add.w	r6, r4, #11
 8004a3a:	f000 f829 	bl	8004a90 <__malloc_unlock>
 8004a3e:	f026 0607 	bic.w	r6, r6, #7
 8004a42:	1d23      	adds	r3, r4, #4
 8004a44:	1af2      	subs	r2, r6, r3
 8004a46:	d0ae      	beq.n	80049a6 <_malloc_r+0x22>
 8004a48:	1b9b      	subs	r3, r3, r6
 8004a4a:	50a3      	str	r3, [r4, r2]
 8004a4c:	e7ab      	b.n	80049a6 <_malloc_r+0x22>
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	6862      	ldr	r2, [r4, #4]
 8004a52:	d1dd      	bne.n	8004a10 <_malloc_r+0x8c>
 8004a54:	f8c8 2000 	str.w	r2, [r8]
 8004a58:	e7ec      	b.n	8004a34 <_malloc_r+0xb0>
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	6864      	ldr	r4, [r4, #4]
 8004a5e:	e7ac      	b.n	80049ba <_malloc_r+0x36>
 8004a60:	4634      	mov	r4, r6
 8004a62:	6876      	ldr	r6, [r6, #4]
 8004a64:	e7b4      	b.n	80049d0 <_malloc_r+0x4c>
 8004a66:	4613      	mov	r3, r2
 8004a68:	e7cc      	b.n	8004a04 <_malloc_r+0x80>
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4638      	mov	r0, r7
 8004a70:	f000 f80e 	bl	8004a90 <__malloc_unlock>
 8004a74:	e797      	b.n	80049a6 <_malloc_r+0x22>
 8004a76:	6025      	str	r5, [r4, #0]
 8004a78:	e7dc      	b.n	8004a34 <_malloc_r+0xb0>
 8004a7a:	605b      	str	r3, [r3, #4]
 8004a7c:	deff      	udf	#255	; 0xff
 8004a7e:	bf00      	nop
 8004a80:	20000384 	.word	0x20000384

08004a84 <__malloc_lock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_lock+0x8>)
 8004a86:	f7ff b88a 	b.w	8003b9e <__retarget_lock_acquire_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	20000380 	.word	0x20000380

08004a90 <__malloc_unlock>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__malloc_unlock+0x8>)
 8004a92:	f7ff b885 	b.w	8003ba0 <__retarget_lock_release_recursive>
 8004a96:	bf00      	nop
 8004a98:	20000380 	.word	0x20000380

08004a9c <_Balloc>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	69c6      	ldr	r6, [r0, #28]
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	b976      	cbnz	r6, 8004ac4 <_Balloc+0x28>
 8004aa6:	2010      	movs	r0, #16
 8004aa8:	f7ff ff44 	bl	8004934 <malloc>
 8004aac:	4602      	mov	r2, r0
 8004aae:	61e0      	str	r0, [r4, #28]
 8004ab0:	b920      	cbnz	r0, 8004abc <_Balloc+0x20>
 8004ab2:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <_Balloc+0x78>)
 8004ab4:	4818      	ldr	r0, [pc, #96]	; (8004b18 <_Balloc+0x7c>)
 8004ab6:	216b      	movs	r1, #107	; 0x6b
 8004ab8:	f000 fc38 	bl	800532c <__assert_func>
 8004abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ac0:	6006      	str	r6, [r0, #0]
 8004ac2:	60c6      	str	r6, [r0, #12]
 8004ac4:	69e6      	ldr	r6, [r4, #28]
 8004ac6:	68f3      	ldr	r3, [r6, #12]
 8004ac8:	b183      	cbz	r3, 8004aec <_Balloc+0x50>
 8004aca:	69e3      	ldr	r3, [r4, #28]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ad2:	b9b8      	cbnz	r0, 8004b04 <_Balloc+0x68>
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f605 	lsl.w	r6, r1, r5
 8004ada:	1d72      	adds	r2, r6, #5
 8004adc:	0092      	lsls	r2, r2, #2
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 fc42 	bl	8005368 <_calloc_r>
 8004ae4:	b160      	cbz	r0, 8004b00 <_Balloc+0x64>
 8004ae6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004aea:	e00e      	b.n	8004b0a <_Balloc+0x6e>
 8004aec:	2221      	movs	r2, #33	; 0x21
 8004aee:	2104      	movs	r1, #4
 8004af0:	4620      	mov	r0, r4
 8004af2:	f000 fc39 	bl	8005368 <_calloc_r>
 8004af6:	69e3      	ldr	r3, [r4, #28]
 8004af8:	60f0      	str	r0, [r6, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e4      	bne.n	8004aca <_Balloc+0x2e>
 8004b00:	2000      	movs	r0, #0
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	6802      	ldr	r2, [r0, #0]
 8004b06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b10:	e7f7      	b.n	8004b02 <_Balloc+0x66>
 8004b12:	bf00      	nop
 8004b14:	080059b1 	.word	0x080059b1
 8004b18:	08005a31 	.word	0x08005a31

08004b1c <_Bfree>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	69c6      	ldr	r6, [r0, #28]
 8004b20:	4605      	mov	r5, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b976      	cbnz	r6, 8004b44 <_Bfree+0x28>
 8004b26:	2010      	movs	r0, #16
 8004b28:	f7ff ff04 	bl	8004934 <malloc>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	61e8      	str	r0, [r5, #28]
 8004b30:	b920      	cbnz	r0, 8004b3c <_Bfree+0x20>
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <_Bfree+0x3c>)
 8004b34:	4809      	ldr	r0, [pc, #36]	; (8004b5c <_Bfree+0x40>)
 8004b36:	218f      	movs	r1, #143	; 0x8f
 8004b38:	f000 fbf8 	bl	800532c <__assert_func>
 8004b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b40:	6006      	str	r6, [r0, #0]
 8004b42:	60c6      	str	r6, [r0, #12]
 8004b44:	b13c      	cbz	r4, 8004b56 <_Bfree+0x3a>
 8004b46:	69eb      	ldr	r3, [r5, #28]
 8004b48:	6862      	ldr	r2, [r4, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b50:	6021      	str	r1, [r4, #0]
 8004b52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	080059b1 	.word	0x080059b1
 8004b5c:	08005a31 	.word	0x08005a31

08004b60 <__multadd>:
 8004b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b64:	690d      	ldr	r5, [r1, #16]
 8004b66:	4607      	mov	r7, r0
 8004b68:	460c      	mov	r4, r1
 8004b6a:	461e      	mov	r6, r3
 8004b6c:	f101 0c14 	add.w	ip, r1, #20
 8004b70:	2000      	movs	r0, #0
 8004b72:	f8dc 3000 	ldr.w	r3, [ip]
 8004b76:	b299      	uxth	r1, r3
 8004b78:	fb02 6101 	mla	r1, r2, r1, r6
 8004b7c:	0c1e      	lsrs	r6, r3, #16
 8004b7e:	0c0b      	lsrs	r3, r1, #16
 8004b80:	fb02 3306 	mla	r3, r2, r6, r3
 8004b84:	b289      	uxth	r1, r1
 8004b86:	3001      	adds	r0, #1
 8004b88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b8c:	4285      	cmp	r5, r0
 8004b8e:	f84c 1b04 	str.w	r1, [ip], #4
 8004b92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b96:	dcec      	bgt.n	8004b72 <__multadd+0x12>
 8004b98:	b30e      	cbz	r6, 8004bde <__multadd+0x7e>
 8004b9a:	68a3      	ldr	r3, [r4, #8]
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	dc19      	bgt.n	8004bd4 <__multadd+0x74>
 8004ba0:	6861      	ldr	r1, [r4, #4]
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	3101      	adds	r1, #1
 8004ba6:	f7ff ff79 	bl	8004a9c <_Balloc>
 8004baa:	4680      	mov	r8, r0
 8004bac:	b928      	cbnz	r0, 8004bba <__multadd+0x5a>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <__multadd+0x84>)
 8004bb2:	480d      	ldr	r0, [pc, #52]	; (8004be8 <__multadd+0x88>)
 8004bb4:	21ba      	movs	r1, #186	; 0xba
 8004bb6:	f000 fbb9 	bl	800532c <__assert_func>
 8004bba:	6922      	ldr	r2, [r4, #16]
 8004bbc:	3202      	adds	r2, #2
 8004bbe:	f104 010c 	add.w	r1, r4, #12
 8004bc2:	0092      	lsls	r2, r2, #2
 8004bc4:	300c      	adds	r0, #12
 8004bc6:	f000 fba3 	bl	8005310 <memcpy>
 8004bca:	4621      	mov	r1, r4
 8004bcc:	4638      	mov	r0, r7
 8004bce:	f7ff ffa5 	bl	8004b1c <_Bfree>
 8004bd2:	4644      	mov	r4, r8
 8004bd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004bd8:	3501      	adds	r5, #1
 8004bda:	615e      	str	r6, [r3, #20]
 8004bdc:	6125      	str	r5, [r4, #16]
 8004bde:	4620      	mov	r0, r4
 8004be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be4:	08005a20 	.word	0x08005a20
 8004be8:	08005a31 	.word	0x08005a31

08004bec <__hi0bits>:
 8004bec:	0c03      	lsrs	r3, r0, #16
 8004bee:	041b      	lsls	r3, r3, #16
 8004bf0:	b9d3      	cbnz	r3, 8004c28 <__hi0bits+0x3c>
 8004bf2:	0400      	lsls	r0, r0, #16
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004bfa:	bf04      	itt	eq
 8004bfc:	0200      	lsleq	r0, r0, #8
 8004bfe:	3308      	addeq	r3, #8
 8004c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004c04:	bf04      	itt	eq
 8004c06:	0100      	lsleq	r0, r0, #4
 8004c08:	3304      	addeq	r3, #4
 8004c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004c0e:	bf04      	itt	eq
 8004c10:	0080      	lsleq	r0, r0, #2
 8004c12:	3302      	addeq	r3, #2
 8004c14:	2800      	cmp	r0, #0
 8004c16:	db05      	blt.n	8004c24 <__hi0bits+0x38>
 8004c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004c1c:	f103 0301 	add.w	r3, r3, #1
 8004c20:	bf08      	it	eq
 8004c22:	2320      	moveq	r3, #32
 8004c24:	4618      	mov	r0, r3
 8004c26:	4770      	bx	lr
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e7e4      	b.n	8004bf6 <__hi0bits+0xa>

08004c2c <__lo0bits>:
 8004c2c:	6803      	ldr	r3, [r0, #0]
 8004c2e:	f013 0207 	ands.w	r2, r3, #7
 8004c32:	d00c      	beq.n	8004c4e <__lo0bits+0x22>
 8004c34:	07d9      	lsls	r1, r3, #31
 8004c36:	d422      	bmi.n	8004c7e <__lo0bits+0x52>
 8004c38:	079a      	lsls	r2, r3, #30
 8004c3a:	bf49      	itett	mi
 8004c3c:	085b      	lsrmi	r3, r3, #1
 8004c3e:	089b      	lsrpl	r3, r3, #2
 8004c40:	6003      	strmi	r3, [r0, #0]
 8004c42:	2201      	movmi	r2, #1
 8004c44:	bf5c      	itt	pl
 8004c46:	6003      	strpl	r3, [r0, #0]
 8004c48:	2202      	movpl	r2, #2
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4770      	bx	lr
 8004c4e:	b299      	uxth	r1, r3
 8004c50:	b909      	cbnz	r1, 8004c56 <__lo0bits+0x2a>
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	2210      	movs	r2, #16
 8004c56:	b2d9      	uxtb	r1, r3
 8004c58:	b909      	cbnz	r1, 8004c5e <__lo0bits+0x32>
 8004c5a:	3208      	adds	r2, #8
 8004c5c:	0a1b      	lsrs	r3, r3, #8
 8004c5e:	0719      	lsls	r1, r3, #28
 8004c60:	bf04      	itt	eq
 8004c62:	091b      	lsreq	r3, r3, #4
 8004c64:	3204      	addeq	r2, #4
 8004c66:	0799      	lsls	r1, r3, #30
 8004c68:	bf04      	itt	eq
 8004c6a:	089b      	lsreq	r3, r3, #2
 8004c6c:	3202      	addeq	r2, #2
 8004c6e:	07d9      	lsls	r1, r3, #31
 8004c70:	d403      	bmi.n	8004c7a <__lo0bits+0x4e>
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	f102 0201 	add.w	r2, r2, #1
 8004c78:	d003      	beq.n	8004c82 <__lo0bits+0x56>
 8004c7a:	6003      	str	r3, [r0, #0]
 8004c7c:	e7e5      	b.n	8004c4a <__lo0bits+0x1e>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	e7e3      	b.n	8004c4a <__lo0bits+0x1e>
 8004c82:	2220      	movs	r2, #32
 8004c84:	e7e1      	b.n	8004c4a <__lo0bits+0x1e>
	...

08004c88 <__i2b>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	f7ff ff05 	bl	8004a9c <_Balloc>
 8004c92:	4602      	mov	r2, r0
 8004c94:	b928      	cbnz	r0, 8004ca2 <__i2b+0x1a>
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <__i2b+0x24>)
 8004c98:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <__i2b+0x28>)
 8004c9a:	f240 1145 	movw	r1, #325	; 0x145
 8004c9e:	f000 fb45 	bl	800532c <__assert_func>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	6144      	str	r4, [r0, #20]
 8004ca6:	6103      	str	r3, [r0, #16]
 8004ca8:	bd10      	pop	{r4, pc}
 8004caa:	bf00      	nop
 8004cac:	08005a20 	.word	0x08005a20
 8004cb0:	08005a31 	.word	0x08005a31

08004cb4 <__multiply>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4691      	mov	r9, r2
 8004cba:	690a      	ldr	r2, [r1, #16]
 8004cbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bfb8      	it	lt
 8004cc4:	460b      	movlt	r3, r1
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	bfbc      	itt	lt
 8004cca:	464c      	movlt	r4, r9
 8004ccc:	4699      	movlt	r9, r3
 8004cce:	6927      	ldr	r7, [r4, #16]
 8004cd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	6861      	ldr	r1, [r4, #4]
 8004cd8:	eb07 060a 	add.w	r6, r7, sl
 8004cdc:	42b3      	cmp	r3, r6
 8004cde:	b085      	sub	sp, #20
 8004ce0:	bfb8      	it	lt
 8004ce2:	3101      	addlt	r1, #1
 8004ce4:	f7ff feda 	bl	8004a9c <_Balloc>
 8004ce8:	b930      	cbnz	r0, 8004cf8 <__multiply+0x44>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b44      	ldr	r3, [pc, #272]	; (8004e00 <__multiply+0x14c>)
 8004cee:	4845      	ldr	r0, [pc, #276]	; (8004e04 <__multiply+0x150>)
 8004cf0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004cf4:	f000 fb1a 	bl	800532c <__assert_func>
 8004cf8:	f100 0514 	add.w	r5, r0, #20
 8004cfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004d00:	462b      	mov	r3, r5
 8004d02:	2200      	movs	r2, #0
 8004d04:	4543      	cmp	r3, r8
 8004d06:	d321      	bcc.n	8004d4c <__multiply+0x98>
 8004d08:	f104 0314 	add.w	r3, r4, #20
 8004d0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004d10:	f109 0314 	add.w	r3, r9, #20
 8004d14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004d18:	9202      	str	r2, [sp, #8]
 8004d1a:	1b3a      	subs	r2, r7, r4
 8004d1c:	3a15      	subs	r2, #21
 8004d1e:	f022 0203 	bic.w	r2, r2, #3
 8004d22:	3204      	adds	r2, #4
 8004d24:	f104 0115 	add.w	r1, r4, #21
 8004d28:	428f      	cmp	r7, r1
 8004d2a:	bf38      	it	cc
 8004d2c:	2204      	movcc	r2, #4
 8004d2e:	9201      	str	r2, [sp, #4]
 8004d30:	9a02      	ldr	r2, [sp, #8]
 8004d32:	9303      	str	r3, [sp, #12]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d80c      	bhi.n	8004d52 <__multiply+0x9e>
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	dd03      	ble.n	8004d44 <__multiply+0x90>
 8004d3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05b      	beq.n	8004dfc <__multiply+0x148>
 8004d44:	6106      	str	r6, [r0, #16]
 8004d46:	b005      	add	sp, #20
 8004d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4c:	f843 2b04 	str.w	r2, [r3], #4
 8004d50:	e7d8      	b.n	8004d04 <__multiply+0x50>
 8004d52:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d56:	f1ba 0f00 	cmp.w	sl, #0
 8004d5a:	d024      	beq.n	8004da6 <__multiply+0xf2>
 8004d5c:	f104 0e14 	add.w	lr, r4, #20
 8004d60:	46a9      	mov	r9, r5
 8004d62:	f04f 0c00 	mov.w	ip, #0
 8004d66:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d6a:	f8d9 1000 	ldr.w	r1, [r9]
 8004d6e:	fa1f fb82 	uxth.w	fp, r2
 8004d72:	b289      	uxth	r1, r1
 8004d74:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d80:	4461      	add	r1, ip
 8004d82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d86:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d8e:	b289      	uxth	r1, r1
 8004d90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d94:	4577      	cmp	r7, lr
 8004d96:	f849 1b04 	str.w	r1, [r9], #4
 8004d9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d9e:	d8e2      	bhi.n	8004d66 <__multiply+0xb2>
 8004da0:	9a01      	ldr	r2, [sp, #4]
 8004da2:	f845 c002 	str.w	ip, [r5, r2]
 8004da6:	9a03      	ldr	r2, [sp, #12]
 8004da8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004dac:	3304      	adds	r3, #4
 8004dae:	f1b9 0f00 	cmp.w	r9, #0
 8004db2:	d021      	beq.n	8004df8 <__multiply+0x144>
 8004db4:	6829      	ldr	r1, [r5, #0]
 8004db6:	f104 0c14 	add.w	ip, r4, #20
 8004dba:	46ae      	mov	lr, r5
 8004dbc:	f04f 0a00 	mov.w	sl, #0
 8004dc0:	f8bc b000 	ldrh.w	fp, [ip]
 8004dc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004dc8:	fb09 220b 	mla	r2, r9, fp, r2
 8004dcc:	4452      	add	r2, sl
 8004dce:	b289      	uxth	r1, r1
 8004dd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004dd4:	f84e 1b04 	str.w	r1, [lr], #4
 8004dd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004ddc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004de0:	f8be 1000 	ldrh.w	r1, [lr]
 8004de4:	fb09 110a 	mla	r1, r9, sl, r1
 8004de8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004dec:	4567      	cmp	r7, ip
 8004dee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004df2:	d8e5      	bhi.n	8004dc0 <__multiply+0x10c>
 8004df4:	9a01      	ldr	r2, [sp, #4]
 8004df6:	50a9      	str	r1, [r5, r2]
 8004df8:	3504      	adds	r5, #4
 8004dfa:	e799      	b.n	8004d30 <__multiply+0x7c>
 8004dfc:	3e01      	subs	r6, #1
 8004dfe:	e79b      	b.n	8004d38 <__multiply+0x84>
 8004e00:	08005a20 	.word	0x08005a20
 8004e04:	08005a31 	.word	0x08005a31

08004e08 <__pow5mult>:
 8004e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0c:	4615      	mov	r5, r2
 8004e0e:	f012 0203 	ands.w	r2, r2, #3
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	d007      	beq.n	8004e28 <__pow5mult+0x20>
 8004e18:	4c25      	ldr	r4, [pc, #148]	; (8004eb0 <__pow5mult+0xa8>)
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e22:	f7ff fe9d 	bl	8004b60 <__multadd>
 8004e26:	4607      	mov	r7, r0
 8004e28:	10ad      	asrs	r5, r5, #2
 8004e2a:	d03d      	beq.n	8004ea8 <__pow5mult+0xa0>
 8004e2c:	69f4      	ldr	r4, [r6, #28]
 8004e2e:	b97c      	cbnz	r4, 8004e50 <__pow5mult+0x48>
 8004e30:	2010      	movs	r0, #16
 8004e32:	f7ff fd7f 	bl	8004934 <malloc>
 8004e36:	4602      	mov	r2, r0
 8004e38:	61f0      	str	r0, [r6, #28]
 8004e3a:	b928      	cbnz	r0, 8004e48 <__pow5mult+0x40>
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <__pow5mult+0xac>)
 8004e3e:	481e      	ldr	r0, [pc, #120]	; (8004eb8 <__pow5mult+0xb0>)
 8004e40:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004e44:	f000 fa72 	bl	800532c <__assert_func>
 8004e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e4c:	6004      	str	r4, [r0, #0]
 8004e4e:	60c4      	str	r4, [r0, #12]
 8004e50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e58:	b94c      	cbnz	r4, 8004e6e <__pow5mult+0x66>
 8004e5a:	f240 2171 	movw	r1, #625	; 0x271
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ff12 	bl	8004c88 <__i2b>
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	6003      	str	r3, [r0, #0]
 8004e6e:	f04f 0900 	mov.w	r9, #0
 8004e72:	07eb      	lsls	r3, r5, #31
 8004e74:	d50a      	bpl.n	8004e8c <__pow5mult+0x84>
 8004e76:	4639      	mov	r1, r7
 8004e78:	4622      	mov	r2, r4
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f7ff ff1a 	bl	8004cb4 <__multiply>
 8004e80:	4639      	mov	r1, r7
 8004e82:	4680      	mov	r8, r0
 8004e84:	4630      	mov	r0, r6
 8004e86:	f7ff fe49 	bl	8004b1c <_Bfree>
 8004e8a:	4647      	mov	r7, r8
 8004e8c:	106d      	asrs	r5, r5, #1
 8004e8e:	d00b      	beq.n	8004ea8 <__pow5mult+0xa0>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	b938      	cbnz	r0, 8004ea4 <__pow5mult+0x9c>
 8004e94:	4622      	mov	r2, r4
 8004e96:	4621      	mov	r1, r4
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f7ff ff0b 	bl	8004cb4 <__multiply>
 8004e9e:	6020      	str	r0, [r4, #0]
 8004ea0:	f8c0 9000 	str.w	r9, [r0]
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	e7e4      	b.n	8004e72 <__pow5mult+0x6a>
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eae:	bf00      	nop
 8004eb0:	08005b80 	.word	0x08005b80
 8004eb4:	080059b1 	.word	0x080059b1
 8004eb8:	08005a31 	.word	0x08005a31

08004ebc <__lshift>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	6849      	ldr	r1, [r1, #4]
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	4607      	mov	r7, r0
 8004ece:	4691      	mov	r9, r2
 8004ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ed4:	f108 0601 	add.w	r6, r8, #1
 8004ed8:	42b3      	cmp	r3, r6
 8004eda:	db0b      	blt.n	8004ef4 <__lshift+0x38>
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff fddd 	bl	8004a9c <_Balloc>
 8004ee2:	4605      	mov	r5, r0
 8004ee4:	b948      	cbnz	r0, 8004efa <__lshift+0x3e>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <__lshift+0xd0>)
 8004eea:	4829      	ldr	r0, [pc, #164]	; (8004f90 <__lshift+0xd4>)
 8004eec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004ef0:	f000 fa1c 	bl	800532c <__assert_func>
 8004ef4:	3101      	adds	r1, #1
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__lshift+0x1c>
 8004efa:	2300      	movs	r3, #0
 8004efc:	f100 0114 	add.w	r1, r0, #20
 8004f00:	f100 0210 	add.w	r2, r0, #16
 8004f04:	4618      	mov	r0, r3
 8004f06:	4553      	cmp	r3, sl
 8004f08:	db33      	blt.n	8004f72 <__lshift+0xb6>
 8004f0a:	6920      	ldr	r0, [r4, #16]
 8004f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f10:	f104 0314 	add.w	r3, r4, #20
 8004f14:	f019 091f 	ands.w	r9, r9, #31
 8004f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f20:	d02b      	beq.n	8004f7a <__lshift+0xbe>
 8004f22:	f1c9 0e20 	rsb	lr, r9, #32
 8004f26:	468a      	mov	sl, r1
 8004f28:	2200      	movs	r2, #0
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	fa00 f009 	lsl.w	r0, r0, r9
 8004f30:	4310      	orrs	r0, r2
 8004f32:	f84a 0b04 	str.w	r0, [sl], #4
 8004f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3a:	459c      	cmp	ip, r3
 8004f3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f40:	d8f3      	bhi.n	8004f2a <__lshift+0x6e>
 8004f42:	ebac 0304 	sub.w	r3, ip, r4
 8004f46:	3b15      	subs	r3, #21
 8004f48:	f023 0303 	bic.w	r3, r3, #3
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	f104 0015 	add.w	r0, r4, #21
 8004f52:	4584      	cmp	ip, r0
 8004f54:	bf38      	it	cc
 8004f56:	2304      	movcc	r3, #4
 8004f58:	50ca      	str	r2, [r1, r3]
 8004f5a:	b10a      	cbz	r2, 8004f60 <__lshift+0xa4>
 8004f5c:	f108 0602 	add.w	r6, r8, #2
 8004f60:	3e01      	subs	r6, #1
 8004f62:	4638      	mov	r0, r7
 8004f64:	612e      	str	r6, [r5, #16]
 8004f66:	4621      	mov	r1, r4
 8004f68:	f7ff fdd8 	bl	8004b1c <_Bfree>
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f72:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f76:	3301      	adds	r3, #1
 8004f78:	e7c5      	b.n	8004f06 <__lshift+0x4a>
 8004f7a:	3904      	subs	r1, #4
 8004f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f80:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f84:	459c      	cmp	ip, r3
 8004f86:	d8f9      	bhi.n	8004f7c <__lshift+0xc0>
 8004f88:	e7ea      	b.n	8004f60 <__lshift+0xa4>
 8004f8a:	bf00      	nop
 8004f8c:	08005a20 	.word	0x08005a20
 8004f90:	08005a31 	.word	0x08005a31

08004f94 <__mcmp>:
 8004f94:	b530      	push	{r4, r5, lr}
 8004f96:	6902      	ldr	r2, [r0, #16]
 8004f98:	690c      	ldr	r4, [r1, #16]
 8004f9a:	1b12      	subs	r2, r2, r4
 8004f9c:	d10e      	bne.n	8004fbc <__mcmp+0x28>
 8004f9e:	f100 0314 	add.w	r3, r0, #20
 8004fa2:	3114      	adds	r1, #20
 8004fa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004fa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004fac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004fb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004fb4:	42a5      	cmp	r5, r4
 8004fb6:	d003      	beq.n	8004fc0 <__mcmp+0x2c>
 8004fb8:	d305      	bcc.n	8004fc6 <__mcmp+0x32>
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	bd30      	pop	{r4, r5, pc}
 8004fc0:	4283      	cmp	r3, r0
 8004fc2:	d3f3      	bcc.n	8004fac <__mcmp+0x18>
 8004fc4:	e7fa      	b.n	8004fbc <__mcmp+0x28>
 8004fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fca:	e7f7      	b.n	8004fbc <__mcmp+0x28>

08004fcc <__mdiff>:
 8004fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	4690      	mov	r8, r2
 8004fda:	f7ff ffdb 	bl	8004f94 <__mcmp>
 8004fde:	1e05      	subs	r5, r0, #0
 8004fe0:	d110      	bne.n	8005004 <__mdiff+0x38>
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f7ff fd59 	bl	8004a9c <_Balloc>
 8004fea:	b930      	cbnz	r0, 8004ffa <__mdiff+0x2e>
 8004fec:	4b3a      	ldr	r3, [pc, #232]	; (80050d8 <__mdiff+0x10c>)
 8004fee:	4602      	mov	r2, r0
 8004ff0:	f240 2137 	movw	r1, #567	; 0x237
 8004ff4:	4839      	ldr	r0, [pc, #228]	; (80050dc <__mdiff+0x110>)
 8004ff6:	f000 f999 	bl	800532c <__assert_func>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005004:	bfa4      	itt	ge
 8005006:	4643      	movge	r3, r8
 8005008:	46a0      	movge	r8, r4
 800500a:	4630      	mov	r0, r6
 800500c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005010:	bfa6      	itte	ge
 8005012:	461c      	movge	r4, r3
 8005014:	2500      	movge	r5, #0
 8005016:	2501      	movlt	r5, #1
 8005018:	f7ff fd40 	bl	8004a9c <_Balloc>
 800501c:	b920      	cbnz	r0, 8005028 <__mdiff+0x5c>
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <__mdiff+0x10c>)
 8005020:	4602      	mov	r2, r0
 8005022:	f240 2145 	movw	r1, #581	; 0x245
 8005026:	e7e5      	b.n	8004ff4 <__mdiff+0x28>
 8005028:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800502c:	6926      	ldr	r6, [r4, #16]
 800502e:	60c5      	str	r5, [r0, #12]
 8005030:	f104 0914 	add.w	r9, r4, #20
 8005034:	f108 0514 	add.w	r5, r8, #20
 8005038:	f100 0e14 	add.w	lr, r0, #20
 800503c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005040:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005044:	f108 0210 	add.w	r2, r8, #16
 8005048:	46f2      	mov	sl, lr
 800504a:	2100      	movs	r1, #0
 800504c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005050:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005054:	fa11 f88b 	uxtah	r8, r1, fp
 8005058:	b299      	uxth	r1, r3
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	eba8 0801 	sub.w	r8, r8, r1
 8005060:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005064:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005068:	fa1f f888 	uxth.w	r8, r8
 800506c:	1419      	asrs	r1, r3, #16
 800506e:	454e      	cmp	r6, r9
 8005070:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005074:	f84a 3b04 	str.w	r3, [sl], #4
 8005078:	d8e8      	bhi.n	800504c <__mdiff+0x80>
 800507a:	1b33      	subs	r3, r6, r4
 800507c:	3b15      	subs	r3, #21
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	3304      	adds	r3, #4
 8005084:	3415      	adds	r4, #21
 8005086:	42a6      	cmp	r6, r4
 8005088:	bf38      	it	cc
 800508a:	2304      	movcc	r3, #4
 800508c:	441d      	add	r5, r3
 800508e:	4473      	add	r3, lr
 8005090:	469e      	mov	lr, r3
 8005092:	462e      	mov	r6, r5
 8005094:	4566      	cmp	r6, ip
 8005096:	d30e      	bcc.n	80050b6 <__mdiff+0xea>
 8005098:	f10c 0203 	add.w	r2, ip, #3
 800509c:	1b52      	subs	r2, r2, r5
 800509e:	f022 0203 	bic.w	r2, r2, #3
 80050a2:	3d03      	subs	r5, #3
 80050a4:	45ac      	cmp	ip, r5
 80050a6:	bf38      	it	cc
 80050a8:	2200      	movcc	r2, #0
 80050aa:	4413      	add	r3, r2
 80050ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80050b0:	b17a      	cbz	r2, 80050d2 <__mdiff+0x106>
 80050b2:	6107      	str	r7, [r0, #16]
 80050b4:	e7a4      	b.n	8005000 <__mdiff+0x34>
 80050b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80050ba:	fa11 f288 	uxtah	r2, r1, r8
 80050be:	1414      	asrs	r4, r2, #16
 80050c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80050c4:	b292      	uxth	r2, r2
 80050c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80050ca:	f84e 2b04 	str.w	r2, [lr], #4
 80050ce:	1421      	asrs	r1, r4, #16
 80050d0:	e7e0      	b.n	8005094 <__mdiff+0xc8>
 80050d2:	3f01      	subs	r7, #1
 80050d4:	e7ea      	b.n	80050ac <__mdiff+0xe0>
 80050d6:	bf00      	nop
 80050d8:	08005a20 	.word	0x08005a20
 80050dc:	08005a31 	.word	0x08005a31

080050e0 <__d2b>:
 80050e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050e4:	460f      	mov	r7, r1
 80050e6:	2101      	movs	r1, #1
 80050e8:	ec59 8b10 	vmov	r8, r9, d0
 80050ec:	4616      	mov	r6, r2
 80050ee:	f7ff fcd5 	bl	8004a9c <_Balloc>
 80050f2:	4604      	mov	r4, r0
 80050f4:	b930      	cbnz	r0, 8005104 <__d2b+0x24>
 80050f6:	4602      	mov	r2, r0
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <__d2b+0xac>)
 80050fa:	4825      	ldr	r0, [pc, #148]	; (8005190 <__d2b+0xb0>)
 80050fc:	f240 310f 	movw	r1, #783	; 0x30f
 8005100:	f000 f914 	bl	800532c <__assert_func>
 8005104:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800510c:	bb2d      	cbnz	r5, 800515a <__d2b+0x7a>
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f1b8 0300 	subs.w	r3, r8, #0
 8005114:	d026      	beq.n	8005164 <__d2b+0x84>
 8005116:	4668      	mov	r0, sp
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	f7ff fd87 	bl	8004c2c <__lo0bits>
 800511e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005122:	b1e8      	cbz	r0, 8005160 <__d2b+0x80>
 8005124:	f1c0 0320 	rsb	r3, r0, #32
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	430b      	orrs	r3, r1
 800512e:	40c2      	lsrs	r2, r0
 8005130:	6163      	str	r3, [r4, #20]
 8005132:	9201      	str	r2, [sp, #4]
 8005134:	9b01      	ldr	r3, [sp, #4]
 8005136:	61a3      	str	r3, [r4, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	bf14      	ite	ne
 800513c:	2202      	movne	r2, #2
 800513e:	2201      	moveq	r2, #1
 8005140:	6122      	str	r2, [r4, #16]
 8005142:	b1bd      	cbz	r5, 8005174 <__d2b+0x94>
 8005144:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005148:	4405      	add	r5, r0
 800514a:	603d      	str	r5, [r7, #0]
 800514c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005150:	6030      	str	r0, [r6, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	b003      	add	sp, #12
 8005156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800515a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800515e:	e7d6      	b.n	800510e <__d2b+0x2e>
 8005160:	6161      	str	r1, [r4, #20]
 8005162:	e7e7      	b.n	8005134 <__d2b+0x54>
 8005164:	a801      	add	r0, sp, #4
 8005166:	f7ff fd61 	bl	8004c2c <__lo0bits>
 800516a:	9b01      	ldr	r3, [sp, #4]
 800516c:	6163      	str	r3, [r4, #20]
 800516e:	3020      	adds	r0, #32
 8005170:	2201      	movs	r2, #1
 8005172:	e7e5      	b.n	8005140 <__d2b+0x60>
 8005174:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005178:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800517c:	6038      	str	r0, [r7, #0]
 800517e:	6918      	ldr	r0, [r3, #16]
 8005180:	f7ff fd34 	bl	8004bec <__hi0bits>
 8005184:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005188:	e7e2      	b.n	8005150 <__d2b+0x70>
 800518a:	bf00      	nop
 800518c:	08005a20 	.word	0x08005a20
 8005190:	08005a31 	.word	0x08005a31

08005194 <__sflush_r>:
 8005194:	898a      	ldrh	r2, [r1, #12]
 8005196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800519a:	4605      	mov	r5, r0
 800519c:	0710      	lsls	r0, r2, #28
 800519e:	460c      	mov	r4, r1
 80051a0:	d458      	bmi.n	8005254 <__sflush_r+0xc0>
 80051a2:	684b      	ldr	r3, [r1, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dc05      	bgt.n	80051b4 <__sflush_r+0x20>
 80051a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	dc02      	bgt.n	80051b4 <__sflush_r+0x20>
 80051ae:	2000      	movs	r0, #0
 80051b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051b6:	2e00      	cmp	r6, #0
 80051b8:	d0f9      	beq.n	80051ae <__sflush_r+0x1a>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051c0:	682f      	ldr	r7, [r5, #0]
 80051c2:	6a21      	ldr	r1, [r4, #32]
 80051c4:	602b      	str	r3, [r5, #0]
 80051c6:	d032      	beq.n	800522e <__sflush_r+0x9a>
 80051c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	075a      	lsls	r2, r3, #29
 80051ce:	d505      	bpl.n	80051dc <__sflush_r+0x48>
 80051d0:	6863      	ldr	r3, [r4, #4]
 80051d2:	1ac0      	subs	r0, r0, r3
 80051d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051d6:	b10b      	cbz	r3, 80051dc <__sflush_r+0x48>
 80051d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	2300      	movs	r3, #0
 80051de:	4602      	mov	r2, r0
 80051e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051e2:	6a21      	ldr	r1, [r4, #32]
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b0      	blx	r6
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	d106      	bne.n	80051fc <__sflush_r+0x68>
 80051ee:	6829      	ldr	r1, [r5, #0]
 80051f0:	291d      	cmp	r1, #29
 80051f2:	d82b      	bhi.n	800524c <__sflush_r+0xb8>
 80051f4:	4a29      	ldr	r2, [pc, #164]	; (800529c <__sflush_r+0x108>)
 80051f6:	410a      	asrs	r2, r1
 80051f8:	07d6      	lsls	r6, r2, #31
 80051fa:	d427      	bmi.n	800524c <__sflush_r+0xb8>
 80051fc:	2200      	movs	r2, #0
 80051fe:	6062      	str	r2, [r4, #4]
 8005200:	04d9      	lsls	r1, r3, #19
 8005202:	6922      	ldr	r2, [r4, #16]
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	d504      	bpl.n	8005212 <__sflush_r+0x7e>
 8005208:	1c42      	adds	r2, r0, #1
 800520a:	d101      	bne.n	8005210 <__sflush_r+0x7c>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b903      	cbnz	r3, 8005212 <__sflush_r+0x7e>
 8005210:	6560      	str	r0, [r4, #84]	; 0x54
 8005212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005214:	602f      	str	r7, [r5, #0]
 8005216:	2900      	cmp	r1, #0
 8005218:	d0c9      	beq.n	80051ae <__sflush_r+0x1a>
 800521a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800521e:	4299      	cmp	r1, r3
 8005220:	d002      	beq.n	8005228 <__sflush_r+0x94>
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff fb3a 	bl	800489c <_free_r>
 8005228:	2000      	movs	r0, #0
 800522a:	6360      	str	r0, [r4, #52]	; 0x34
 800522c:	e7c0      	b.n	80051b0 <__sflush_r+0x1c>
 800522e:	2301      	movs	r3, #1
 8005230:	4628      	mov	r0, r5
 8005232:	47b0      	blx	r6
 8005234:	1c41      	adds	r1, r0, #1
 8005236:	d1c8      	bne.n	80051ca <__sflush_r+0x36>
 8005238:	682b      	ldr	r3, [r5, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0c5      	beq.n	80051ca <__sflush_r+0x36>
 800523e:	2b1d      	cmp	r3, #29
 8005240:	d001      	beq.n	8005246 <__sflush_r+0xb2>
 8005242:	2b16      	cmp	r3, #22
 8005244:	d101      	bne.n	800524a <__sflush_r+0xb6>
 8005246:	602f      	str	r7, [r5, #0]
 8005248:	e7b1      	b.n	80051ae <__sflush_r+0x1a>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005250:	81a3      	strh	r3, [r4, #12]
 8005252:	e7ad      	b.n	80051b0 <__sflush_r+0x1c>
 8005254:	690f      	ldr	r7, [r1, #16]
 8005256:	2f00      	cmp	r7, #0
 8005258:	d0a9      	beq.n	80051ae <__sflush_r+0x1a>
 800525a:	0793      	lsls	r3, r2, #30
 800525c:	680e      	ldr	r6, [r1, #0]
 800525e:	bf08      	it	eq
 8005260:	694b      	ldreq	r3, [r1, #20]
 8005262:	600f      	str	r7, [r1, #0]
 8005264:	bf18      	it	ne
 8005266:	2300      	movne	r3, #0
 8005268:	eba6 0807 	sub.w	r8, r6, r7
 800526c:	608b      	str	r3, [r1, #8]
 800526e:	f1b8 0f00 	cmp.w	r8, #0
 8005272:	dd9c      	ble.n	80051ae <__sflush_r+0x1a>
 8005274:	6a21      	ldr	r1, [r4, #32]
 8005276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005278:	4643      	mov	r3, r8
 800527a:	463a      	mov	r2, r7
 800527c:	4628      	mov	r0, r5
 800527e:	47b0      	blx	r6
 8005280:	2800      	cmp	r0, #0
 8005282:	dc06      	bgt.n	8005292 <__sflush_r+0xfe>
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005290:	e78e      	b.n	80051b0 <__sflush_r+0x1c>
 8005292:	4407      	add	r7, r0
 8005294:	eba8 0800 	sub.w	r8, r8, r0
 8005298:	e7e9      	b.n	800526e <__sflush_r+0xda>
 800529a:	bf00      	nop
 800529c:	dfbffffe 	.word	0xdfbffffe

080052a0 <_fflush_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	690b      	ldr	r3, [r1, #16]
 80052a4:	4605      	mov	r5, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	b913      	cbnz	r3, 80052b0 <_fflush_r+0x10>
 80052aa:	2500      	movs	r5, #0
 80052ac:	4628      	mov	r0, r5
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	b118      	cbz	r0, 80052ba <_fflush_r+0x1a>
 80052b2:	6a03      	ldr	r3, [r0, #32]
 80052b4:	b90b      	cbnz	r3, 80052ba <_fflush_r+0x1a>
 80052b6:	f7fe fb7b 	bl	80039b0 <__sinit>
 80052ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0f3      	beq.n	80052aa <_fflush_r+0xa>
 80052c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052c4:	07d0      	lsls	r0, r2, #31
 80052c6:	d404      	bmi.n	80052d2 <_fflush_r+0x32>
 80052c8:	0599      	lsls	r1, r3, #22
 80052ca:	d402      	bmi.n	80052d2 <_fflush_r+0x32>
 80052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ce:	f7fe fc66 	bl	8003b9e <__retarget_lock_acquire_recursive>
 80052d2:	4628      	mov	r0, r5
 80052d4:	4621      	mov	r1, r4
 80052d6:	f7ff ff5d 	bl	8005194 <__sflush_r>
 80052da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052dc:	07da      	lsls	r2, r3, #31
 80052de:	4605      	mov	r5, r0
 80052e0:	d4e4      	bmi.n	80052ac <_fflush_r+0xc>
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	059b      	lsls	r3, r3, #22
 80052e6:	d4e1      	bmi.n	80052ac <_fflush_r+0xc>
 80052e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ea:	f7fe fc59 	bl	8003ba0 <__retarget_lock_release_recursive>
 80052ee:	e7dd      	b.n	80052ac <_fflush_r+0xc>

080052f0 <_sbrk_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d06      	ldr	r5, [pc, #24]	; (800530c <_sbrk_r+0x1c>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	f7fc f890 	bl	8001420 <_sbrk>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_sbrk_r+0x1a>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_sbrk_r+0x1a>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	2000037c 	.word	0x2000037c

08005310 <memcpy>:
 8005310:	440a      	add	r2, r1
 8005312:	4291      	cmp	r1, r2
 8005314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005318:	d100      	bne.n	800531c <memcpy+0xc>
 800531a:	4770      	bx	lr
 800531c:	b510      	push	{r4, lr}
 800531e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005326:	4291      	cmp	r1, r2
 8005328:	d1f9      	bne.n	800531e <memcpy+0xe>
 800532a:	bd10      	pop	{r4, pc}

0800532c <__assert_func>:
 800532c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800532e:	4614      	mov	r4, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4b09      	ldr	r3, [pc, #36]	; (8005358 <__assert_func+0x2c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4605      	mov	r5, r0
 8005338:	68d8      	ldr	r0, [r3, #12]
 800533a:	b14c      	cbz	r4, 8005350 <__assert_func+0x24>
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <__assert_func+0x30>)
 800533e:	9100      	str	r1, [sp, #0]
 8005340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005344:	4906      	ldr	r1, [pc, #24]	; (8005360 <__assert_func+0x34>)
 8005346:	462b      	mov	r3, r5
 8005348:	f000 f844 	bl	80053d4 <fiprintf>
 800534c:	f000 f854 	bl	80053f8 <abort>
 8005350:	4b04      	ldr	r3, [pc, #16]	; (8005364 <__assert_func+0x38>)
 8005352:	461c      	mov	r4, r3
 8005354:	e7f3      	b.n	800533e <__assert_func+0x12>
 8005356:	bf00      	nop
 8005358:	20000064 	.word	0x20000064
 800535c:	08005b96 	.word	0x08005b96
 8005360:	08005ba3 	.word	0x08005ba3
 8005364:	08005bd1 	.word	0x08005bd1

08005368 <_calloc_r>:
 8005368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800536a:	fba1 2402 	umull	r2, r4, r1, r2
 800536e:	b94c      	cbnz	r4, 8005384 <_calloc_r+0x1c>
 8005370:	4611      	mov	r1, r2
 8005372:	9201      	str	r2, [sp, #4]
 8005374:	f7ff fb06 	bl	8004984 <_malloc_r>
 8005378:	9a01      	ldr	r2, [sp, #4]
 800537a:	4605      	mov	r5, r0
 800537c:	b930      	cbnz	r0, 800538c <_calloc_r+0x24>
 800537e:	4628      	mov	r0, r5
 8005380:	b003      	add	sp, #12
 8005382:	bd30      	pop	{r4, r5, pc}
 8005384:	220c      	movs	r2, #12
 8005386:	6002      	str	r2, [r0, #0]
 8005388:	2500      	movs	r5, #0
 800538a:	e7f8      	b.n	800537e <_calloc_r+0x16>
 800538c:	4621      	mov	r1, r4
 800538e:	f7fe fb88 	bl	8003aa2 <memset>
 8005392:	e7f4      	b.n	800537e <_calloc_r+0x16>

08005394 <__ascii_mbtowc>:
 8005394:	b082      	sub	sp, #8
 8005396:	b901      	cbnz	r1, 800539a <__ascii_mbtowc+0x6>
 8005398:	a901      	add	r1, sp, #4
 800539a:	b142      	cbz	r2, 80053ae <__ascii_mbtowc+0x1a>
 800539c:	b14b      	cbz	r3, 80053b2 <__ascii_mbtowc+0x1e>
 800539e:	7813      	ldrb	r3, [r2, #0]
 80053a0:	600b      	str	r3, [r1, #0]
 80053a2:	7812      	ldrb	r2, [r2, #0]
 80053a4:	1e10      	subs	r0, r2, #0
 80053a6:	bf18      	it	ne
 80053a8:	2001      	movne	r0, #1
 80053aa:	b002      	add	sp, #8
 80053ac:	4770      	bx	lr
 80053ae:	4610      	mov	r0, r2
 80053b0:	e7fb      	b.n	80053aa <__ascii_mbtowc+0x16>
 80053b2:	f06f 0001 	mvn.w	r0, #1
 80053b6:	e7f8      	b.n	80053aa <__ascii_mbtowc+0x16>

080053b8 <__ascii_wctomb>:
 80053b8:	b149      	cbz	r1, 80053ce <__ascii_wctomb+0x16>
 80053ba:	2aff      	cmp	r2, #255	; 0xff
 80053bc:	bf85      	ittet	hi
 80053be:	238a      	movhi	r3, #138	; 0x8a
 80053c0:	6003      	strhi	r3, [r0, #0]
 80053c2:	700a      	strbls	r2, [r1, #0]
 80053c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80053c8:	bf98      	it	ls
 80053ca:	2001      	movls	r0, #1
 80053cc:	4770      	bx	lr
 80053ce:	4608      	mov	r0, r1
 80053d0:	4770      	bx	lr
	...

080053d4 <fiprintf>:
 80053d4:	b40e      	push	{r1, r2, r3}
 80053d6:	b503      	push	{r0, r1, lr}
 80053d8:	4601      	mov	r1, r0
 80053da:	ab03      	add	r3, sp, #12
 80053dc:	4805      	ldr	r0, [pc, #20]	; (80053f4 <fiprintf+0x20>)
 80053de:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e2:	6800      	ldr	r0, [r0, #0]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	f000 f837 	bl	8005458 <_vfiprintf_r>
 80053ea:	b002      	add	sp, #8
 80053ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f0:	b003      	add	sp, #12
 80053f2:	4770      	bx	lr
 80053f4:	20000064 	.word	0x20000064

080053f8 <abort>:
 80053f8:	b508      	push	{r3, lr}
 80053fa:	2006      	movs	r0, #6
 80053fc:	f000 fa04 	bl	8005808 <raise>
 8005400:	2001      	movs	r0, #1
 8005402:	f7fb ff95 	bl	8001330 <_exit>

08005406 <__sfputc_r>:
 8005406:	6893      	ldr	r3, [r2, #8]
 8005408:	3b01      	subs	r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	b410      	push	{r4}
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	da08      	bge.n	8005424 <__sfputc_r+0x1e>
 8005412:	6994      	ldr	r4, [r2, #24]
 8005414:	42a3      	cmp	r3, r4
 8005416:	db01      	blt.n	800541c <__sfputc_r+0x16>
 8005418:	290a      	cmp	r1, #10
 800541a:	d103      	bne.n	8005424 <__sfputc_r+0x1e>
 800541c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005420:	f000 b934 	b.w	800568c <__swbuf_r>
 8005424:	6813      	ldr	r3, [r2, #0]
 8005426:	1c58      	adds	r0, r3, #1
 8005428:	6010      	str	r0, [r2, #0]
 800542a:	7019      	strb	r1, [r3, #0]
 800542c:	4608      	mov	r0, r1
 800542e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005432:	4770      	bx	lr

08005434 <__sfputs_r>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	4606      	mov	r6, r0
 8005438:	460f      	mov	r7, r1
 800543a:	4614      	mov	r4, r2
 800543c:	18d5      	adds	r5, r2, r3
 800543e:	42ac      	cmp	r4, r5
 8005440:	d101      	bne.n	8005446 <__sfputs_r+0x12>
 8005442:	2000      	movs	r0, #0
 8005444:	e007      	b.n	8005456 <__sfputs_r+0x22>
 8005446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800544a:	463a      	mov	r2, r7
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff ffda 	bl	8005406 <__sfputc_r>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	d1f3      	bne.n	800543e <__sfputs_r+0xa>
 8005456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005458 <_vfiprintf_r>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	460d      	mov	r5, r1
 800545e:	b09d      	sub	sp, #116	; 0x74
 8005460:	4614      	mov	r4, r2
 8005462:	4698      	mov	r8, r3
 8005464:	4606      	mov	r6, r0
 8005466:	b118      	cbz	r0, 8005470 <_vfiprintf_r+0x18>
 8005468:	6a03      	ldr	r3, [r0, #32]
 800546a:	b90b      	cbnz	r3, 8005470 <_vfiprintf_r+0x18>
 800546c:	f7fe faa0 	bl	80039b0 <__sinit>
 8005470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005472:	07d9      	lsls	r1, r3, #31
 8005474:	d405      	bmi.n	8005482 <_vfiprintf_r+0x2a>
 8005476:	89ab      	ldrh	r3, [r5, #12]
 8005478:	059a      	lsls	r2, r3, #22
 800547a:	d402      	bmi.n	8005482 <_vfiprintf_r+0x2a>
 800547c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547e:	f7fe fb8e 	bl	8003b9e <__retarget_lock_acquire_recursive>
 8005482:	89ab      	ldrh	r3, [r5, #12]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	d501      	bpl.n	800548c <_vfiprintf_r+0x34>
 8005488:	692b      	ldr	r3, [r5, #16]
 800548a:	b99b      	cbnz	r3, 80054b4 <_vfiprintf_r+0x5c>
 800548c:	4629      	mov	r1, r5
 800548e:	4630      	mov	r0, r6
 8005490:	f000 f93a 	bl	8005708 <__swsetup_r>
 8005494:	b170      	cbz	r0, 80054b4 <_vfiprintf_r+0x5c>
 8005496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005498:	07dc      	lsls	r4, r3, #31
 800549a:	d504      	bpl.n	80054a6 <_vfiprintf_r+0x4e>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054a0:	b01d      	add	sp, #116	; 0x74
 80054a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a6:	89ab      	ldrh	r3, [r5, #12]
 80054a8:	0598      	lsls	r0, r3, #22
 80054aa:	d4f7      	bmi.n	800549c <_vfiprintf_r+0x44>
 80054ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054ae:	f7fe fb77 	bl	8003ba0 <__retarget_lock_release_recursive>
 80054b2:	e7f3      	b.n	800549c <_vfiprintf_r+0x44>
 80054b4:	2300      	movs	r3, #0
 80054b6:	9309      	str	r3, [sp, #36]	; 0x24
 80054b8:	2320      	movs	r3, #32
 80054ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054be:	f8cd 800c 	str.w	r8, [sp, #12]
 80054c2:	2330      	movs	r3, #48	; 0x30
 80054c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005678 <_vfiprintf_r+0x220>
 80054c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054cc:	f04f 0901 	mov.w	r9, #1
 80054d0:	4623      	mov	r3, r4
 80054d2:	469a      	mov	sl, r3
 80054d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d8:	b10a      	cbz	r2, 80054de <_vfiprintf_r+0x86>
 80054da:	2a25      	cmp	r2, #37	; 0x25
 80054dc:	d1f9      	bne.n	80054d2 <_vfiprintf_r+0x7a>
 80054de:	ebba 0b04 	subs.w	fp, sl, r4
 80054e2:	d00b      	beq.n	80054fc <_vfiprintf_r+0xa4>
 80054e4:	465b      	mov	r3, fp
 80054e6:	4622      	mov	r2, r4
 80054e8:	4629      	mov	r1, r5
 80054ea:	4630      	mov	r0, r6
 80054ec:	f7ff ffa2 	bl	8005434 <__sfputs_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	f000 80a9 	beq.w	8005648 <_vfiprintf_r+0x1f0>
 80054f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f8:	445a      	add	r2, fp
 80054fa:	9209      	str	r2, [sp, #36]	; 0x24
 80054fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 80a1 	beq.w	8005648 <_vfiprintf_r+0x1f0>
 8005506:	2300      	movs	r3, #0
 8005508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800550c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005510:	f10a 0a01 	add.w	sl, sl, #1
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	9307      	str	r3, [sp, #28]
 8005518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800551c:	931a      	str	r3, [sp, #104]	; 0x68
 800551e:	4654      	mov	r4, sl
 8005520:	2205      	movs	r2, #5
 8005522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005526:	4854      	ldr	r0, [pc, #336]	; (8005678 <_vfiprintf_r+0x220>)
 8005528:	f7fa fe52 	bl	80001d0 <memchr>
 800552c:	9a04      	ldr	r2, [sp, #16]
 800552e:	b9d8      	cbnz	r0, 8005568 <_vfiprintf_r+0x110>
 8005530:	06d1      	lsls	r1, r2, #27
 8005532:	bf44      	itt	mi
 8005534:	2320      	movmi	r3, #32
 8005536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800553a:	0713      	lsls	r3, r2, #28
 800553c:	bf44      	itt	mi
 800553e:	232b      	movmi	r3, #43	; 0x2b
 8005540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005544:	f89a 3000 	ldrb.w	r3, [sl]
 8005548:	2b2a      	cmp	r3, #42	; 0x2a
 800554a:	d015      	beq.n	8005578 <_vfiprintf_r+0x120>
 800554c:	9a07      	ldr	r2, [sp, #28]
 800554e:	4654      	mov	r4, sl
 8005550:	2000      	movs	r0, #0
 8005552:	f04f 0c0a 	mov.w	ip, #10
 8005556:	4621      	mov	r1, r4
 8005558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800555c:	3b30      	subs	r3, #48	; 0x30
 800555e:	2b09      	cmp	r3, #9
 8005560:	d94d      	bls.n	80055fe <_vfiprintf_r+0x1a6>
 8005562:	b1b0      	cbz	r0, 8005592 <_vfiprintf_r+0x13a>
 8005564:	9207      	str	r2, [sp, #28]
 8005566:	e014      	b.n	8005592 <_vfiprintf_r+0x13a>
 8005568:	eba0 0308 	sub.w	r3, r0, r8
 800556c:	fa09 f303 	lsl.w	r3, r9, r3
 8005570:	4313      	orrs	r3, r2
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	46a2      	mov	sl, r4
 8005576:	e7d2      	b.n	800551e <_vfiprintf_r+0xc6>
 8005578:	9b03      	ldr	r3, [sp, #12]
 800557a:	1d19      	adds	r1, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	9103      	str	r1, [sp, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	bfbb      	ittet	lt
 8005584:	425b      	neglt	r3, r3
 8005586:	f042 0202 	orrlt.w	r2, r2, #2
 800558a:	9307      	strge	r3, [sp, #28]
 800558c:	9307      	strlt	r3, [sp, #28]
 800558e:	bfb8      	it	lt
 8005590:	9204      	strlt	r2, [sp, #16]
 8005592:	7823      	ldrb	r3, [r4, #0]
 8005594:	2b2e      	cmp	r3, #46	; 0x2e
 8005596:	d10c      	bne.n	80055b2 <_vfiprintf_r+0x15a>
 8005598:	7863      	ldrb	r3, [r4, #1]
 800559a:	2b2a      	cmp	r3, #42	; 0x2a
 800559c:	d134      	bne.n	8005608 <_vfiprintf_r+0x1b0>
 800559e:	9b03      	ldr	r3, [sp, #12]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	9203      	str	r2, [sp, #12]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bfb8      	it	lt
 80055aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80055ae:	3402      	adds	r4, #2
 80055b0:	9305      	str	r3, [sp, #20]
 80055b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005688 <_vfiprintf_r+0x230>
 80055b6:	7821      	ldrb	r1, [r4, #0]
 80055b8:	2203      	movs	r2, #3
 80055ba:	4650      	mov	r0, sl
 80055bc:	f7fa fe08 	bl	80001d0 <memchr>
 80055c0:	b138      	cbz	r0, 80055d2 <_vfiprintf_r+0x17a>
 80055c2:	9b04      	ldr	r3, [sp, #16]
 80055c4:	eba0 000a 	sub.w	r0, r0, sl
 80055c8:	2240      	movs	r2, #64	; 0x40
 80055ca:	4082      	lsls	r2, r0
 80055cc:	4313      	orrs	r3, r2
 80055ce:	3401      	adds	r4, #1
 80055d0:	9304      	str	r3, [sp, #16]
 80055d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d6:	4829      	ldr	r0, [pc, #164]	; (800567c <_vfiprintf_r+0x224>)
 80055d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055dc:	2206      	movs	r2, #6
 80055de:	f7fa fdf7 	bl	80001d0 <memchr>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d03f      	beq.n	8005666 <_vfiprintf_r+0x20e>
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <_vfiprintf_r+0x228>)
 80055e8:	bb1b      	cbnz	r3, 8005632 <_vfiprintf_r+0x1da>
 80055ea:	9b03      	ldr	r3, [sp, #12]
 80055ec:	3307      	adds	r3, #7
 80055ee:	f023 0307 	bic.w	r3, r3, #7
 80055f2:	3308      	adds	r3, #8
 80055f4:	9303      	str	r3, [sp, #12]
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	443b      	add	r3, r7
 80055fa:	9309      	str	r3, [sp, #36]	; 0x24
 80055fc:	e768      	b.n	80054d0 <_vfiprintf_r+0x78>
 80055fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005602:	460c      	mov	r4, r1
 8005604:	2001      	movs	r0, #1
 8005606:	e7a6      	b.n	8005556 <_vfiprintf_r+0xfe>
 8005608:	2300      	movs	r3, #0
 800560a:	3401      	adds	r4, #1
 800560c:	9305      	str	r3, [sp, #20]
 800560e:	4619      	mov	r1, r3
 8005610:	f04f 0c0a 	mov.w	ip, #10
 8005614:	4620      	mov	r0, r4
 8005616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800561a:	3a30      	subs	r2, #48	; 0x30
 800561c:	2a09      	cmp	r2, #9
 800561e:	d903      	bls.n	8005628 <_vfiprintf_r+0x1d0>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0c6      	beq.n	80055b2 <_vfiprintf_r+0x15a>
 8005624:	9105      	str	r1, [sp, #20]
 8005626:	e7c4      	b.n	80055b2 <_vfiprintf_r+0x15a>
 8005628:	fb0c 2101 	mla	r1, ip, r1, r2
 800562c:	4604      	mov	r4, r0
 800562e:	2301      	movs	r3, #1
 8005630:	e7f0      	b.n	8005614 <_vfiprintf_r+0x1bc>
 8005632:	ab03      	add	r3, sp, #12
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	462a      	mov	r2, r5
 8005638:	4b12      	ldr	r3, [pc, #72]	; (8005684 <_vfiprintf_r+0x22c>)
 800563a:	a904      	add	r1, sp, #16
 800563c:	4630      	mov	r0, r6
 800563e:	f7fd fd65 	bl	800310c <_printf_float>
 8005642:	4607      	mov	r7, r0
 8005644:	1c78      	adds	r0, r7, #1
 8005646:	d1d6      	bne.n	80055f6 <_vfiprintf_r+0x19e>
 8005648:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800564a:	07d9      	lsls	r1, r3, #31
 800564c:	d405      	bmi.n	800565a <_vfiprintf_r+0x202>
 800564e:	89ab      	ldrh	r3, [r5, #12]
 8005650:	059a      	lsls	r2, r3, #22
 8005652:	d402      	bmi.n	800565a <_vfiprintf_r+0x202>
 8005654:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005656:	f7fe faa3 	bl	8003ba0 <__retarget_lock_release_recursive>
 800565a:	89ab      	ldrh	r3, [r5, #12]
 800565c:	065b      	lsls	r3, r3, #25
 800565e:	f53f af1d 	bmi.w	800549c <_vfiprintf_r+0x44>
 8005662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005664:	e71c      	b.n	80054a0 <_vfiprintf_r+0x48>
 8005666:	ab03      	add	r3, sp, #12
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	462a      	mov	r2, r5
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <_vfiprintf_r+0x22c>)
 800566e:	a904      	add	r1, sp, #16
 8005670:	4630      	mov	r0, r6
 8005672:	f7fd ffef 	bl	8003654 <_printf_i>
 8005676:	e7e4      	b.n	8005642 <_vfiprintf_r+0x1ea>
 8005678:	08005cd3 	.word	0x08005cd3
 800567c:	08005cdd 	.word	0x08005cdd
 8005680:	0800310d 	.word	0x0800310d
 8005684:	08005435 	.word	0x08005435
 8005688:	08005cd9 	.word	0x08005cd9

0800568c <__swbuf_r>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	460e      	mov	r6, r1
 8005690:	4614      	mov	r4, r2
 8005692:	4605      	mov	r5, r0
 8005694:	b118      	cbz	r0, 800569e <__swbuf_r+0x12>
 8005696:	6a03      	ldr	r3, [r0, #32]
 8005698:	b90b      	cbnz	r3, 800569e <__swbuf_r+0x12>
 800569a:	f7fe f989 	bl	80039b0 <__sinit>
 800569e:	69a3      	ldr	r3, [r4, #24]
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	071a      	lsls	r2, r3, #28
 80056a6:	d525      	bpl.n	80056f4 <__swbuf_r+0x68>
 80056a8:	6923      	ldr	r3, [r4, #16]
 80056aa:	b31b      	cbz	r3, 80056f4 <__swbuf_r+0x68>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	6922      	ldr	r2, [r4, #16]
 80056b0:	1a98      	subs	r0, r3, r2
 80056b2:	6963      	ldr	r3, [r4, #20]
 80056b4:	b2f6      	uxtb	r6, r6
 80056b6:	4283      	cmp	r3, r0
 80056b8:	4637      	mov	r7, r6
 80056ba:	dc04      	bgt.n	80056c6 <__swbuf_r+0x3a>
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f7ff fdee 	bl	80052a0 <_fflush_r>
 80056c4:	b9e0      	cbnz	r0, 8005700 <__swbuf_r+0x74>
 80056c6:	68a3      	ldr	r3, [r4, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60a3      	str	r3, [r4, #8]
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	701e      	strb	r6, [r3, #0]
 80056d4:	6962      	ldr	r2, [r4, #20]
 80056d6:	1c43      	adds	r3, r0, #1
 80056d8:	429a      	cmp	r2, r3
 80056da:	d004      	beq.n	80056e6 <__swbuf_r+0x5a>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	07db      	lsls	r3, r3, #31
 80056e0:	d506      	bpl.n	80056f0 <__swbuf_r+0x64>
 80056e2:	2e0a      	cmp	r6, #10
 80056e4:	d104      	bne.n	80056f0 <__swbuf_r+0x64>
 80056e6:	4621      	mov	r1, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f7ff fdd9 	bl	80052a0 <_fflush_r>
 80056ee:	b938      	cbnz	r0, 8005700 <__swbuf_r+0x74>
 80056f0:	4638      	mov	r0, r7
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f4:	4621      	mov	r1, r4
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 f806 	bl	8005708 <__swsetup_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d0d5      	beq.n	80056ac <__swbuf_r+0x20>
 8005700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005704:	e7f4      	b.n	80056f0 <__swbuf_r+0x64>
	...

08005708 <__swsetup_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <__swsetup_r+0xac>)
 800570c:	4605      	mov	r5, r0
 800570e:	6818      	ldr	r0, [r3, #0]
 8005710:	460c      	mov	r4, r1
 8005712:	b118      	cbz	r0, 800571c <__swsetup_r+0x14>
 8005714:	6a03      	ldr	r3, [r0, #32]
 8005716:	b90b      	cbnz	r3, 800571c <__swsetup_r+0x14>
 8005718:	f7fe f94a 	bl	80039b0 <__sinit>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005722:	0718      	lsls	r0, r3, #28
 8005724:	d422      	bmi.n	800576c <__swsetup_r+0x64>
 8005726:	06d9      	lsls	r1, r3, #27
 8005728:	d407      	bmi.n	800573a <__swsetup_r+0x32>
 800572a:	2309      	movs	r3, #9
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005738:	e034      	b.n	80057a4 <__swsetup_r+0x9c>
 800573a:	0758      	lsls	r0, r3, #29
 800573c:	d512      	bpl.n	8005764 <__swsetup_r+0x5c>
 800573e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005740:	b141      	cbz	r1, 8005754 <__swsetup_r+0x4c>
 8005742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005746:	4299      	cmp	r1, r3
 8005748:	d002      	beq.n	8005750 <__swsetup_r+0x48>
 800574a:	4628      	mov	r0, r5
 800574c:	f7ff f8a6 	bl	800489c <_free_r>
 8005750:	2300      	movs	r3, #0
 8005752:	6363      	str	r3, [r4, #52]	; 0x34
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	2300      	movs	r3, #0
 800575e:	6063      	str	r3, [r4, #4]
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	6023      	str	r3, [r4, #0]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f043 0308 	orr.w	r3, r3, #8
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	b94b      	cbnz	r3, 8005784 <__swsetup_r+0x7c>
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577a:	d003      	beq.n	8005784 <__swsetup_r+0x7c>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f884 	bl	800588c <__smakebuf_r>
 8005784:	89a0      	ldrh	r0, [r4, #12]
 8005786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800578a:	f010 0301 	ands.w	r3, r0, #1
 800578e:	d00a      	beq.n	80057a6 <__swsetup_r+0x9e>
 8005790:	2300      	movs	r3, #0
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	6963      	ldr	r3, [r4, #20]
 8005796:	425b      	negs	r3, r3
 8005798:	61a3      	str	r3, [r4, #24]
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b943      	cbnz	r3, 80057b0 <__swsetup_r+0xa8>
 800579e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057a2:	d1c4      	bne.n	800572e <__swsetup_r+0x26>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	0781      	lsls	r1, r0, #30
 80057a8:	bf58      	it	pl
 80057aa:	6963      	ldrpl	r3, [r4, #20]
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	e7f4      	b.n	800579a <__swsetup_r+0x92>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e7f7      	b.n	80057a4 <__swsetup_r+0x9c>
 80057b4:	20000064 	.word	0x20000064

080057b8 <_raise_r>:
 80057b8:	291f      	cmp	r1, #31
 80057ba:	b538      	push	{r3, r4, r5, lr}
 80057bc:	4604      	mov	r4, r0
 80057be:	460d      	mov	r5, r1
 80057c0:	d904      	bls.n	80057cc <_raise_r+0x14>
 80057c2:	2316      	movs	r3, #22
 80057c4:	6003      	str	r3, [r0, #0]
 80057c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057ce:	b112      	cbz	r2, 80057d6 <_raise_r+0x1e>
 80057d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057d4:	b94b      	cbnz	r3, 80057ea <_raise_r+0x32>
 80057d6:	4620      	mov	r0, r4
 80057d8:	f000 f830 	bl	800583c <_getpid_r>
 80057dc:	462a      	mov	r2, r5
 80057de:	4601      	mov	r1, r0
 80057e0:	4620      	mov	r0, r4
 80057e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e6:	f000 b817 	b.w	8005818 <_kill_r>
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d00a      	beq.n	8005804 <_raise_r+0x4c>
 80057ee:	1c59      	adds	r1, r3, #1
 80057f0:	d103      	bne.n	80057fa <_raise_r+0x42>
 80057f2:	2316      	movs	r3, #22
 80057f4:	6003      	str	r3, [r0, #0]
 80057f6:	2001      	movs	r0, #1
 80057f8:	e7e7      	b.n	80057ca <_raise_r+0x12>
 80057fa:	2400      	movs	r4, #0
 80057fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005800:	4628      	mov	r0, r5
 8005802:	4798      	blx	r3
 8005804:	2000      	movs	r0, #0
 8005806:	e7e0      	b.n	80057ca <_raise_r+0x12>

08005808 <raise>:
 8005808:	4b02      	ldr	r3, [pc, #8]	; (8005814 <raise+0xc>)
 800580a:	4601      	mov	r1, r0
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	f7ff bfd3 	b.w	80057b8 <_raise_r>
 8005812:	bf00      	nop
 8005814:	20000064 	.word	0x20000064

08005818 <_kill_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_kill_r+0x20>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	4611      	mov	r1, r2
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	f7fb fd73 	bl	8001310 <_kill>
 800582a:	1c43      	adds	r3, r0, #1
 800582c:	d102      	bne.n	8005834 <_kill_r+0x1c>
 800582e:	682b      	ldr	r3, [r5, #0]
 8005830:	b103      	cbz	r3, 8005834 <_kill_r+0x1c>
 8005832:	6023      	str	r3, [r4, #0]
 8005834:	bd38      	pop	{r3, r4, r5, pc}
 8005836:	bf00      	nop
 8005838:	2000037c 	.word	0x2000037c

0800583c <_getpid_r>:
 800583c:	f7fb bd60 	b.w	8001300 <_getpid>

08005840 <__swhatbuf_r>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	460c      	mov	r4, r1
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	2900      	cmp	r1, #0
 800584a:	b096      	sub	sp, #88	; 0x58
 800584c:	4615      	mov	r5, r2
 800584e:	461e      	mov	r6, r3
 8005850:	da0d      	bge.n	800586e <__swhatbuf_r+0x2e>
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005858:	f04f 0100 	mov.w	r1, #0
 800585c:	bf0c      	ite	eq
 800585e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005862:	2340      	movne	r3, #64	; 0x40
 8005864:	2000      	movs	r0, #0
 8005866:	6031      	str	r1, [r6, #0]
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	b016      	add	sp, #88	; 0x58
 800586c:	bd70      	pop	{r4, r5, r6, pc}
 800586e:	466a      	mov	r2, sp
 8005870:	f000 f848 	bl	8005904 <_fstat_r>
 8005874:	2800      	cmp	r0, #0
 8005876:	dbec      	blt.n	8005852 <__swhatbuf_r+0x12>
 8005878:	9901      	ldr	r1, [sp, #4]
 800587a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800587e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005882:	4259      	negs	r1, r3
 8005884:	4159      	adcs	r1, r3
 8005886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800588a:	e7eb      	b.n	8005864 <__swhatbuf_r+0x24>

0800588c <__smakebuf_r>:
 800588c:	898b      	ldrh	r3, [r1, #12]
 800588e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005890:	079d      	lsls	r5, r3, #30
 8005892:	4606      	mov	r6, r0
 8005894:	460c      	mov	r4, r1
 8005896:	d507      	bpl.n	80058a8 <__smakebuf_r+0x1c>
 8005898:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	6123      	str	r3, [r4, #16]
 80058a0:	2301      	movs	r3, #1
 80058a2:	6163      	str	r3, [r4, #20]
 80058a4:	b002      	add	sp, #8
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	ab01      	add	r3, sp, #4
 80058aa:	466a      	mov	r2, sp
 80058ac:	f7ff ffc8 	bl	8005840 <__swhatbuf_r>
 80058b0:	9900      	ldr	r1, [sp, #0]
 80058b2:	4605      	mov	r5, r0
 80058b4:	4630      	mov	r0, r6
 80058b6:	f7ff f865 	bl	8004984 <_malloc_r>
 80058ba:	b948      	cbnz	r0, 80058d0 <__smakebuf_r+0x44>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	059a      	lsls	r2, r3, #22
 80058c2:	d4ef      	bmi.n	80058a4 <__smakebuf_r+0x18>
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	f043 0302 	orr.w	r3, r3, #2
 80058cc:	81a3      	strh	r3, [r4, #12]
 80058ce:	e7e3      	b.n	8005898 <__smakebuf_r+0xc>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	6020      	str	r0, [r4, #0]
 80058d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	9b00      	ldr	r3, [sp, #0]
 80058dc:	6163      	str	r3, [r4, #20]
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	6120      	str	r0, [r4, #16]
 80058e2:	b15b      	cbz	r3, 80058fc <__smakebuf_r+0x70>
 80058e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e8:	4630      	mov	r0, r6
 80058ea:	f000 f81d 	bl	8005928 <_isatty_r>
 80058ee:	b128      	cbz	r0, 80058fc <__smakebuf_r+0x70>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	431d      	orrs	r5, r3
 8005900:	81a5      	strh	r5, [r4, #12]
 8005902:	e7cf      	b.n	80058a4 <__smakebuf_r+0x18>

08005904 <_fstat_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	; (8005924 <_fstat_r+0x20>)
 8005908:	2300      	movs	r3, #0
 800590a:	4604      	mov	r4, r0
 800590c:	4608      	mov	r0, r1
 800590e:	4611      	mov	r1, r2
 8005910:	602b      	str	r3, [r5, #0]
 8005912:	f7fb fd5c 	bl	80013ce <_fstat>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	d102      	bne.n	8005920 <_fstat_r+0x1c>
 800591a:	682b      	ldr	r3, [r5, #0]
 800591c:	b103      	cbz	r3, 8005920 <_fstat_r+0x1c>
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	bd38      	pop	{r3, r4, r5, pc}
 8005922:	bf00      	nop
 8005924:	2000037c 	.word	0x2000037c

08005928 <_isatty_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_isatty_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb fd5b 	bl	80013ee <_isatty>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_isatty_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_isatty_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	2000037c 	.word	0x2000037c

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
